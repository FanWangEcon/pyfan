[
["index.html", "A Collection of Python Examples Preface", " A Collection of Python Examples Fan Wang 2020-05-17 Preface This is a work-in-progress website consisting of python tutorials and examples to accomplish. Files are written with RMD (Allaire et al. 2020). Materials are gathered from various projects in which python code is used for research and paper-administrative tasks. Files are from Fan’s pyfan repository which has an associated package. The package functionalize various tasks tested out in the Rmd files. In addition, the pyecon repository and the associated package (readthedocs) contain functions and rmd files related explicitly to solving economic models. From Fan’s other repositories: For dynamic borrowing and savings problems, see Dynamic Asset Repository (Matlab); For code examples, see also Matlab Example Code, R Example Code, and Stata Example Code; For intro econ with Matlab, see Intro Mathematics for Economists, and for intro stat with R, see Intro Statistics for Undergraduates. See here for all of Fan’s public repositories. The site is built using Bookdown (Xie 2020). Please contact FanWangEcon for issues or problems. References "],
["array-matrix-dataframe.html", "Chapter 1 Array, Matrix, Dataframe 1.1 Array", " Chapter 1 Array, Matrix, Dataframe 1.1 Array 1.1.1 Strings Go to the RMD, PDF, or HTML version of this file. Go back to fan’s Python Code Examples Repository (bookdown site). 1.1.1.1 Search if Names Include Strings Given a list of strings, loop but skip if string contains elements string list. # define string ls_st_ignore = [&#39;abc&#39;, &#39;efg&#39;, &#39;xyz&#39;] ls_st_loop = [&#39;ab cefg sdf&#39;, &#39;12345&#39;, &#39;xyz&#39;, &#39;abc xyz&#39;, &#39;good morning&#39;] # zip and loop and replace for st_loop in ls_st_loop: if sum([st_ignore in st_loop for st_ignore in ls_st_ignore]): print(&#39;skip:&#39;, st_loop) else: print(&#39;not skip:&#39;, st_loop) ## skip: ab cefg sdf ## not skip: 12345 ## skip: xyz ## skip: abc xyz ## not skip: good morning 1.1.1.2 Replace a Set of Strings in String Replace terms in string # define string st_full = &quot;&quot;&quot; abc is a great efg, probably xyz. Yes, xyz is great, like efg. eft good, EFG capitalized, efg good again. A B C or abc or ABC. Interesting xyz. &quot;&quot;&quot; # define new and old ls_st_old = [&#39;abc&#39;, &#39;efg&#39;, &#39;xyz&#39;] ls_st_new = [&#39;123&#39;, &#39;456&#39;, &#39;789&#39;] # zip and loop and replace for old, new in zip(ls_st_old, ls_st_new): st_full = st_full.replace(old, new) # print print(st_full) ## ## 123 is a great 456, probably 789. Yes, 789 is great, like 456. ## eft good, EFG capitalized, 456 good again. ## A B C or 123 or ABC. Interesting 789. "],
["system-and-support.html", "Chapter 2 System and Support 2.1 File In and Out", " Chapter 2 System and Support 2.1 File In and Out 2.1.1 Reading, Editing, Compile and Convert Tex with Pandoc Go to the RMD, PDF, or HTML version of this file. Go back to fan’s Python Code Examples Repository (bookdown site). python create a text file python write file from paragraphs 2.1.1.1 Generate a tex file Will a bare-bone tex file with some texts inside, save inside the *_file* subfolder. First, create the text text string, note the the linebreaks utomatically generate linebreaks, note that slash need double slash: # Create the Tex Text # Note that trible quotes begin first and end last lines stf_tex_contents = &quot;&quot;&quot;\\\\documentclass[12pt,english]{article} \\\\usepackage[bottom]{footmisc} \\\\usepackage[urlcolor=blue]{hyperref} \\\\begin{document} \\\\title{A Latex Testing File} \\\\author{\\\\href{http://fanwangecon.github.io/}{Fan Wang} \\\\thanks{See information \\\\href{https://fanwangecon.github.io/Tex4Econ/}{Tex4Econ} for more.}} \\\\maketitle Ipsum information dolor sit amet, consectetur adipiscing elit. Integer Latex placerat nunc orci. \\\\paragraph{\\\\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132}{Data}} Village closure information is taken from a village head survey.\\\\footnote{Generally students went to schools.} \\\\end{document}&quot;&quot;&quot; # Print print(stf_tex_contents) ## \\documentclass[12pt,english]{article} ## \\usepackage[bottom]{footmisc} ## \\usepackage[urlcolor=blue]{hyperref} ## \\begin{document} ## \\title{A Latex Testing File} ## \\author{\\href{http://fanwangecon.github.io/}{Fan Wang} \\thanks{See information \\href{https://fanwangecon.github.io/Tex4Econ/}{Tex4Econ} for more.}} ## \\maketitle ## Ipsum information dolor sit amet, consectetur adipiscing elit. Integer Latex placerat nunc orci. ## \\paragraph{\\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132}{Data}} ## Village closure information is taken from a village head survey.\\footnote{Generally students went to schools.} ## \\end{document} Second, write the contents of the file to a new tex file stored inside the *_file* subfolder of the directory: # Relative file name srt_file_tex = &quot;_file/&quot; sna_file_tex = &quot;test_fan&quot; srn_file_tex = srt_file_tex + sna_file_tex + &quot;.tex&quot; # Open new file fl_tex_contents = open(srn_file_tex, &#39;w&#39;) # Write to File fl_tex_contents.write(stf_tex_contents) # print ## 617 fl_tex_contents.close() 2.1.1.2 Replace Strings in a tex file Replace a set of strings in the file just generated by a set of alternative strings. # Open file Get text fl_tex_contents = open(srn_file_tex) stf_tex_contents = fl_tex_contents.read() print(srn_file_tex) # define new and old ## _file/test_fan.tex ls_st_old = [&#39;information&#39;, &#39;Latex&#39;] ls_st_new = [&#39;INFOREPLACE&#39;, &#39;LATEX&#39;] # zip and loop and replace for old, new in zip(ls_st_old, ls_st_new): stf_tex_contents = stf_tex_contents.replace(old, new) print(stf_tex_contents) # write to file with replacements ## \\documentclass[12pt,english]{article} ## \\usepackage[bottom]{footmisc} ## \\usepackage[urlcolor=blue]{hyperref} ## \\begin{document} ## \\title{A LATEX Testing File} ## \\author{\\href{http://fanwangecon.github.io/}{Fan Wang} \\thanks{See INFOREPLACE \\href{https://fanwangecon.github.io/Tex4Econ/}{Tex4Econ} for more.}} ## \\maketitle ## Ipsum INFOREPLACE dolor sit amet, consectetur adipiscing elit. Integer LATEX placerat nunc orci. ## \\paragraph{\\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132}{Data}} ## Village closure INFOREPLACE is taken from a village head survey.\\footnote{Generally students went to schools.} ## \\end{document} sna_file_edited_tex = &quot;test_fan_edited&quot; srn_file_edited_tex = srt_file_tex + sna_file_edited_tex + &quot;.tex&quot; fl_tex_ed_contents = open(srn_file_edited_tex, &#39;w&#39;) fl_tex_ed_contents.write(stf_tex_contents) ## 617 fl_tex_ed_contents.close() 2.1.1.3 Convert Tex File to Pandoc and Compile Latex Compile tex file to pdf and clean up the extraneous pdf outputs. import subprocess import os # Change to local directory so path in tex respected. os.chdir(&quot;C:/Users/fan/pyfan/vig/support/inout&quot;) # Convert tex to pdf subprocess.call([&#39;C:/texlive/2019/bin/win32/xelatex.exe&#39;, &#39;-output-directory&#39;, srt_file_tex, srn_file_edited_tex], shell=False) # Clean pdf extraneous output ## 0 ls_st_remove_suffix = [&#39;aux&#39;,&#39;log&#39;,&#39;out&#39;,&#39;bbl&#39;,&#39;blg&#39;] for st_suffix in ls_st_remove_suffix: srn_cur_file = srt_file_tex + sna_file_edited_tex + &quot;.&quot; + st_suffix if (os.path.isfile(srn_cur_file)): os.remove(srt_file_tex + sna_file_edited_tex + &quot;.&quot; + st_suffix) Use pandoc to convert tex file import subprocess # md file name srn_file_md = srt_file_tex + &quot;test_fan_edited.md&quot; # Convert tex to md subprocess.call([&#39;pandoc&#39;, &#39;-s&#39;, srn_file_tex, &#39;-o&#39;, srn_file_md]) # Open md file ## 0 fl_md_contents = open(srn_file_md) print(fl_md_contents.read()) ## --- ## author: ## - &#39;[Fan Wang](http://fanwangecon.github.io/) [^1]&#39; ## title: A Latex Testing File ## --- ## ## \\maketitle ## Ipsum information dolor sit amet, consectetur adipiscing elit. Integer ## Latex placerat nunc orci. ## ## #### [Data](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132) ## ## Village closure information is taken from a village head survey.[^2] ## ## [^1]: See information ## [Tex4Econ](https://fanwangecon.github.io/Tex4Econ/) for more. ## ## [^2]: Generally students went to schools. 2.1.1.4 Search for Files with Suffix in Several Folders python search all files in folders with suffix Search for files in several directories that have a particular suffix. Then decompose directory into sub-components. Search file inside several folders (not recursively in subfolders): from pathlib import Path # directories to search in ls_spt_srh = [&quot;C:/Users/fan/R4Econ/amto/&quot;, &quot;C:/Users/fan/R4Econ/function/&quot;] # get file names in folders (not recursively) ls_spn_found = [spn_file for spt_srh in ls_spt_srh for spn_file in Path(spt_srh).glob(&#39;*.Rmd&#39;)] for spn_found in ls_spn_found: print(spn_found) ## C:\\Users\\fan\\R4Econ\\amto\\main.Rmd ## C:\\Users\\fan\\R4Econ\\function\\main.Rmd Search file recursivesly in all subfolders of folders: from pathlib import Path # directories to search in ls_spt_srh = [&quot;C:/Users/fan/R4Econ/amto/array/&quot;, &quot;C:/Users/fan/R4Econ/amto/list&quot;] # get file names recursively in all subfolders ls_spn_found = [spn_file for spt_srh in ls_spt_srh for spn_file in Path(spt_srh).rglob(&#39;*.R&#39;)] for spn_found in ls_spn_found: drive, path_and_file = os.path.splitdrive(spn_found) path_no_suffix = os.path.splitext(spn_found)[0] path_no_file, file = os.path.split(spn_found) file_no_suffix = Path(spn_found).stem print(&#39;file:&#39;, file, &#39;\\ndrive:&#39;, drive, &#39;\\nfile no suffix:&#39;, file_no_suffix, &#39;\\nfull path:&#39;, spn_found, &#39;\\npt no fle:&#39;, path_no_file, &#39;\\npt no suf:&#39;, path_no_suffix, &#39;\\n&#39;) ## file: fs_ary_basics.R ## drive: C: ## file no suffix: fs_ary_basics ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_basics.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_basics ## ## file: fs_ary_generate.R ## drive: C: ## file no suffix: fs_ary_generate ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_generate.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_generate ## ## file: fs_ary_mesh.R ## drive: C: ## file no suffix: fs_ary_mesh ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_mesh.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_mesh ## ## file: fs_ary_string.R ## drive: C: ## file no suffix: fs_ary_string ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_string.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_string ## ## file: fs_listr.R ## drive: C: ## file no suffix: fs_listr ## full path: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_listr.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_listr ## ## file: fs_lst_basics.R ## drive: C: ## file no suffix: fs_lst_basics ## full path: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_lst_basics.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_lst_basics "],
["index-and-code-links.html", "A Index and Code Links A.1 Array, Matrix, Dataframe links A.2 System and Support links", " A Index and Code Links A.1 Array, Matrix, Dataframe links A.1.1 Section 1.1 Array links Python String Manipulation Examples: rmd | r | pdf | html Various string manipulations py: zip() A.2 System and Support links A.2.1 Section 2.1 File In and Out links Python Reading and Writing to File Examples: rmd | r | pdf | html Reading from file and replace strings in file. py: open() + write() + replace() + [c for b in [[1,2],[2,3]] for c in b] subprocess: read() pathlib: Path().rglob() + Path().stem os: remove() + listdir() + path.isfile() + path.splitdrive() + os.path.splitext() + os.path.split() Allaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, and Richard Iannone. 2020. Rmarkdown: Dynamic Documents for R. https://CRAN.R-project.org/package=rmarkdown. Xie, Yihui. 2020. Bookdown: Authoring Books and Technical Documents with R Markdown. https://CRAN.R-project.org/package=bookdown. "]
]
