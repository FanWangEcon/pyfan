[
["index.html", "A Collection of Python Examples Preface", " A Collection of Python Examples Fan Wang 2020-05-24 Preface This is a work-in-progress website consisting of python tutorials and examples to accomplish. Files are written with RMD (Allaire et al. 2020). Materials are gathered from various projects in which python code is used for research and paper-administrative tasks. Files are from Fan’s pyfan repository which has an associated package. The package functionalize various tasks tested out in the Rmd files. In addition, the pyecon repository and the associated package (readthedocs) contain functions and rmd files related explicitly to solving economic models. From Fan’s other repositories: For dynamic borrowing and savings problems, see Dynamic Asset Repository (Matlab); For code examples, see also Matlab Example Code, R Example Code, and Stata Example Code; For intro econ with Matlab, see Intro Mathematics for Economists, and for intro stat with R, see Intro Statistics for Undergraduates. See here for all of Fan’s public repositories. The site is built using Bookdown (Xie 2020). Please contact FanWangEcon for issues or problems. References "],
["array-matrix-dataframe.html", "Chapter 1 Array, Matrix, Dataframe 1.1 Array 1.2 Dictionary", " Chapter 1 Array, Matrix, Dataframe 1.1 Array 1.1.1 Strings Go to the RMD, PDF, or HTML version of this file. Go back to fan’s Python Code Examples Repository (bookdown site). 1.1.1.1 Search if Names Include Strings Given a list of strings, loop but skip if string contains elements string list. # define string ls_st_ignore = [&#39;abc&#39;, &#39;efg&#39;, &#39;xyz&#39;] ls_st_loop = [&#39;ab cefg sdf&#39;, &#39;12345&#39;, &#39;xyz&#39;, &#39;abc xyz&#39;, &#39;good morning&#39;] # zip and loop and replace for st_loop in ls_st_loop: if sum([st_ignore in st_loop for st_ignore in ls_st_ignore]): print(&#39;skip:&#39;, st_loop) else: print(&#39;not skip:&#39;, st_loop) ## skip: ab cefg sdf ## not skip: 12345 ## skip: xyz ## skip: abc xyz ## not skip: good morning 1.1.1.2 Replace a Set of Strings in String Replace terms in string # define string st_full = &quot;&quot;&quot; abc is a great efg, probably xyz. Yes, xyz is great, like efg. eft good, EFG capitalized, efg good again. A B C or abc or ABC. Interesting xyz. &quot;&quot;&quot; # define new and old ls_st_old = [&#39;abc&#39;, &#39;efg&#39;, &#39;xyz&#39;] ls_st_new = [&#39;123&#39;, &#39;456&#39;, &#39;789&#39;] # zip and loop and replace for old, new in zip(ls_st_old, ls_st_new): st_full = st_full.replace(old, new) # print print(st_full) ## ## 123 is a great 456, probably 789. Yes, 789 is great, like 456. ## eft good, EFG capitalized, 456 good again. ## A B C or 123 or ABC. Interesting 789. 1.2 Dictionary 1.2.1 Dictionary Go to the RMD, PDF, or HTML version of this file. Go back to fan’s Python Code Examples Repository (bookdown site). 1.2.1.1 Create a List of Dictionaries import datetime import pprint ls_dc_exa = [ {&quot;file&quot;: &quot;mat_matlab&quot;, &quot;title&quot;: &quot;One Variable Graphs and Tables&quot;, &quot;description&quot;: &quot;Frequency table, bar chart and histogram&quot;, &quot;val&quot;: 1, &quot;date&quot;: datetime.date(2020, 5, 2)}, {&quot;file&quot;: &quot;mat_two&quot;, &quot;title&quot;: &quot;Second file&quot;, &quot;description&quot;: &quot;Second file.&quot;, &quot;val&quot;: [1, 2, 3], &quot;date&quot;: datetime.date(2020, 5, 2)}, {&quot;file&quot;: &quot;mat_algebra_rules&quot;, &quot;title&quot;: &quot;Opening a Dataset&quot;, &quot;description&quot;: &quot;Opening a Dataset.&quot;, &quot;val&quot;: 1.1, &quot;date&quot;: datetime.date(2018, 12, 1)} ] pprint.pprint(ls_dc_exa, width=1) ## [{&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram&#39;, ## &#39;file&#39;: &#39;mat_matlab&#39;, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;val&#39;: 1}, ## {&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Second &#39; ## &#39;file.&#39;, ## &#39;file&#39;: &#39;mat_two&#39;, ## &#39;title&#39;: &#39;Second &#39; ## &#39;file&#39;, ## &#39;val&#39;: [1, ## 2, ## 3]}, ## {&#39;date&#39;: datetime.date(2018, 12, 1), ## &#39;description&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset.&#39;, ## &#39;file&#39;: &#39;mat_algebra_rules&#39;, ## &#39;title&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset&#39;, ## &#39;val&#39;: 1.1}] 1.2.1.2 Select by Keys in Dictionary Given a list of dictionary, search if key name is in list: # string to search through ls_str_file_ids = [&#39;mat_matlab&#39;, &#39;mat_algebra_rules&#39;] # select subset ls_dc_selected = [dc_exa for dc_exa in ls_dc_exa if dc_exa[&#39;file&#39;] in ls_str_file_ids] # print pprint.pprint(ls_dc_selected, width=1) ## [{&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram&#39;, ## &#39;file&#39;: &#39;mat_matlab&#39;, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;val&#39;: 1}, ## {&#39;date&#39;: datetime.date(2018, 12, 1), ## &#39;description&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset.&#39;, ## &#39;file&#39;: &#39;mat_algebra_rules&#39;, ## &#39;title&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset&#39;, ## &#39;val&#39;: 1.1}] Search and Select by Multiple Keys in Dictionary. Using two keys below: # string to search through ls_str_file_ids = [&#39;mat_matlab&#39;, &#39;mat_algebra_rules&#39;] # select subset ls_dc_selected = [dc_exa for dc_exa in ls_dc_exa if ((dc_exa[&#39;file&#39;] in ls_str_file_ids) and (dc_exa[&#39;val&#39;]== 1))] # print pprint.pprint(ls_dc_selected, width=1) ## [{&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram&#39;, ## &#39;file&#39;: &#39;mat_matlab&#39;, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;val&#39;: 1}] "],
["system-and-support.html", "Chapter 2 System and Support 2.1 File In and Out", " Chapter 2 System and Support 2.1 File In and Out 2.1.1 Read and Write and Convert Go to the RMD, PDF, or HTML version of this file. Go back to fan’s Python Code Examples Repository (bookdown site). python create a text file python write file from paragraphs 2.1.1.1 Generate a tex file Will a bare-bone tex file with some texts inside, save inside the *_file* subfolder. First, create the text text string, note the the linebreaks utomatically generate linebreaks, note that slash need double slash: # Create the Tex Text # Note that trible quotes begin first and end last lines stf_tex_contents = &quot;&quot;&quot;\\\\documentclass[12pt,english]{article} \\\\usepackage[bottom]{footmisc} \\\\usepackage[urlcolor=blue]{hyperref} \\\\begin{document} \\\\title{A Latex Testing File} \\\\author{\\\\href{http://fanwangecon.github.io/}{Fan Wang} \\\\thanks{See information \\\\href{https://fanwangecon.github.io/Tex4Econ/}{Tex4Econ} for more.}} \\\\maketitle Ipsum information dolor sit amet, consectetur adipiscing elit. Integer Latex placerat nunc orci. \\\\paragraph{\\\\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132}{Data}} Village closure information is taken from a village head survey.\\\\footnote{Generally students went to schools.} \\\\end{document}&quot;&quot;&quot; # Print print(stf_tex_contents) ## \\documentclass[12pt,english]{article} ## \\usepackage[bottom]{footmisc} ## \\usepackage[urlcolor=blue]{hyperref} ## \\begin{document} ## \\title{A Latex Testing File} ## \\author{\\href{http://fanwangecon.github.io/}{Fan Wang} \\thanks{See information \\href{https://fanwangecon.github.io/Tex4Econ/}{Tex4Econ} for more.}} ## \\maketitle ## Ipsum information dolor sit amet, consectetur adipiscing elit. Integer Latex placerat nunc orci. ## \\paragraph{\\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132}{Data}} ## Village closure information is taken from a village head survey.\\footnote{Generally students went to schools.} ## \\end{document} Second, write the contents of the file to a new tex file stored inside the *_file* subfolder of the directory: # Relative file name srt_file_tex = &quot;_file/&quot; sna_file_tex = &quot;test_fan&quot; srn_file_tex = srt_file_tex + sna_file_tex + &quot;.tex&quot; # Open new file fl_tex_contents = open(srn_file_tex, &#39;w&#39;) # Write to File fl_tex_contents.write(stf_tex_contents) # print ## 617 fl_tex_contents.close() 2.1.1.2 Replace Strings in a tex file Replace a set of strings in the file just generated by a set of alternative strings. # Open file Get text fl_tex_contents = open(srn_file_tex) stf_tex_contents = fl_tex_contents.read() print(srn_file_tex) # define new and old ## _file/test_fan.tex ls_st_old = [&#39;information&#39;, &#39;Latex&#39;] ls_st_new = [&#39;INFOREPLACE&#39;, &#39;LATEX&#39;] # zip and loop and replace for old, new in zip(ls_st_old, ls_st_new): stf_tex_contents = stf_tex_contents.replace(old, new) print(stf_tex_contents) # write to file with replacements ## \\documentclass[12pt,english]{article} ## \\usepackage[bottom]{footmisc} ## \\usepackage[urlcolor=blue]{hyperref} ## \\begin{document} ## \\title{A LATEX Testing File} ## \\author{\\href{http://fanwangecon.github.io/}{Fan Wang} \\thanks{See INFOREPLACE \\href{https://fanwangecon.github.io/Tex4Econ/}{Tex4Econ} for more.}} ## \\maketitle ## Ipsum INFOREPLACE dolor sit amet, consectetur adipiscing elit. Integer LATEX placerat nunc orci. ## \\paragraph{\\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132}{Data}} ## Village closure INFOREPLACE is taken from a village head survey.\\footnote{Generally students went to schools.} ## \\end{document} sna_file_edited_tex = &quot;test_fan_edited&quot; srn_file_edited_tex = srt_file_tex + sna_file_edited_tex + &quot;.tex&quot; fl_tex_ed_contents = open(srn_file_edited_tex, &#39;w&#39;) fl_tex_ed_contents.write(stf_tex_contents) ## 617 fl_tex_ed_contents.close() 2.1.1.3 Convert Tex File to Pandoc and Compile Latex Compile tex file to pdf and clean up the extraneous pdf outputs. See ff_pdf_gen_clean. import subprocess import os # Change to local directory so path in tex respected. os.chdir(&quot;C:/Users/fan/pyfan/vig/support/inout&quot;) # Convert tex to pdf subprocess.call([&#39;C:/texlive/2019/bin/win32/xelatex.exe&#39;, &#39;-output-directory&#39;, srt_file_tex, srn_file_edited_tex], shell=False) # Clean pdf extraneous output ## 0 ls_st_remove_suffix = [&#39;aux&#39;,&#39;log&#39;,&#39;out&#39;,&#39;bbl&#39;,&#39;blg&#39;] for st_suffix in ls_st_remove_suffix: srn_cur_file = srt_file_tex + sna_file_edited_tex + &quot;.&quot; + st_suffix if (os.path.isfile(srn_cur_file)): os.remove(srt_file_tex + sna_file_edited_tex + &quot;.&quot; + st_suffix) Use pandoc to convert tex file import subprocess # md file name srn_file_md = srt_file_tex + &quot;test_fan_edited.md&quot; # Convert tex to md subprocess.call([&#39;pandoc&#39;, &#39;-s&#39;, srn_file_tex, &#39;-o&#39;, srn_file_md]) # Open md file ## 0 fl_md_contents = open(srn_file_md) print(fl_md_contents.read()) ## --- ## author: ## - &#39;[Fan Wang](http://fanwangecon.github.io/) [^1]&#39; ## title: A Latex Testing File ## --- ## ## \\maketitle ## Ipsum information dolor sit amet, consectetur adipiscing elit. Integer ## Latex placerat nunc orci. ## ## #### [Data](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132) ## ## Village closure information is taken from a village head survey.[^2] ## ## [^1]: See information ## [Tex4Econ](https://fanwangecon.github.io/Tex4Econ/) for more. ## ## [^2]: Generally students went to schools. 2.1.1.4 Search for Files with Suffix in Several Folders python search all files in folders with suffix Search for files in several directories that have a particular suffix. Then decompose directory into sub-components. Search file inside several folders (not recursively in subfolders): from pathlib import Path # directories to search in ls_spt_srh = [&quot;C:/Users/fan/R4Econ/amto/&quot;, &quot;C:/Users/fan/R4Econ/function/&quot;] # get file names in folders (not recursively) ls_spn_found = [spn_file for spt_srh in ls_spt_srh for spn_file in Path(spt_srh).glob(&#39;*.Rmd&#39;)] for spn_found in ls_spn_found: print(spn_found) ## C:\\Users\\fan\\R4Econ\\amto\\main.Rmd ## C:\\Users\\fan\\R4Econ\\function\\main.Rmd Search file recursivesly in all subfolders of folders: from pathlib import Path # directories to search in ls_spt_srh = [&quot;C:/Users/fan/R4Econ/amto/array/&quot;, &quot;C:/Users/fan/R4Econ/amto/list&quot;] # get file names recursively in all subfolders ls_spn_found = [spn_file for spt_srh in ls_spt_srh for spn_file in Path(spt_srh).rglob(&#39;*.R&#39;)] for spn_found in ls_spn_found: drive, path_and_file = os.path.splitdrive(spn_found) path_no_suffix = os.path.splitext(spn_found)[0] path_no_file, file = os.path.split(spn_found) file_no_suffix = Path(spn_found).stem print(&#39;file:&#39;, file, &#39;\\ndrive:&#39;, drive, &#39;\\nfile no suffix:&#39;, file_no_suffix, &#39;\\nfull path:&#39;, spn_found, &#39;\\npt no fle:&#39;, path_no_file, &#39;\\npt no suf:&#39;, path_no_suffix, &#39;\\n&#39;) ## file: fs_ary_basics.R ## drive: C: ## file no suffix: fs_ary_basics ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_basics.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_basics ## ## file: fs_ary_generate.R ## drive: C: ## file no suffix: fs_ary_generate ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_generate.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_generate ## ## file: fs_ary_mesh.R ## drive: C: ## file no suffix: fs_ary_mesh ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_mesh.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_mesh ## ## file: fs_ary_string.R ## drive: C: ## file no suffix: fs_ary_string ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_string.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_string ## ## file: fs_listr.R ## drive: C: ## file no suffix: fs_listr ## full path: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_listr.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_listr ## ## file: fs_lst_basics.R ## drive: C: ## file no suffix: fs_lst_basics ## full path: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_lst_basics.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_lst_basics 2.1.2 Folder Operations Go to the RMD, PDF, or HTML version of this file. Go back to fan’s Python Code Examples Repository (bookdown site). 2.1.2.1 New Folder and Files create a folder and subfolder create two files in the new folder import pathlib # folder root srt_folder = &quot;_folder/&quot; # new folder srt_subfolder = srt_folder + &quot;fa/&quot; # new subfolder srt_subfolder = srt_subfolder + &quot;faa/&quot; # generate folders recursively pathlib.Path(srt_subfolder).mkdir(parents=True, exist_ok=True) # Open new file fl_tex_contents_aa = open(srt_subfolder + &quot;file_a.txt&quot;, &#39;w&#39;) # Write to File fl_tex_contents_aa.write(&#39;contents of file a&#39;) ## 18 fl_tex_contents_aa.close() # Open another new file and save fl_tex_contents_ab = open(srt_subfolder + &quot;file_b.txt&quot;, &#39;w&#39;) # Write to File fl_tex_contents_ab.write(&#39;contents of file b&#39;) ## 18 fl_tex_contents_ab.close() Generate more folders without files: # generate folders recursively pathlib.Path(&quot;_folder/fb/fba/&quot;).mkdir(parents=True, exist_ok=True) # generate folders recursively pathlib.Path(&quot;_folder/fc/&quot;).mkdir(parents=True, exist_ok=True) # generate folders recursively pathlib.Path(&quot;_folder/fd/&quot;).mkdir(parents=True, exist_ok=True) 2.1.2.2 Copy a File from One Folder to Another Move the two files from *_folder/fa/faa* to *_folder/faa* as well as to *_folder/fb/faa. Use shutil.copy2* so that more metadata is copied over. But copyfile is faster. How do I copy a file in Python? Moving one file: import shutil # Faster method shutil.copyfile(&#39;_folder/fa/faa/file_a.txt&#39;, &#39;_folder/fb/file_a.txt&#39;) # More metadat copied, and don&#39;t need to specify name ## &#39;_folder/fb/file_a.txt&#39; shutil.copy2(&#39;_folder/fa/faa/file_a.txt&#39;, &#39;_folder/fb/fba&#39;) ## &#39;_folder/fb/fba\\\\file_a.txt&#39; 2.1.2.3 Copy Folder to Multiple Destimations Move Entire Folder, How do I copy an entire directory of files into an existing directory using Python?: from distutils.dir_util import copy_tree # Move contents from fa/faa/ to fc/faa srt_curroot = &#39;_folder/fa/&#39; srt_folder = &#39;faa/&#39; srt_newroot = &#39;_folder/fc/&#39; # Full source and destination srt_sourc = srt_curroot + srt_folder srt_desct = srt_newroot + srt_folder # Check/Create new Directory pathlib.Path(srt_desct).mkdir(parents=True, exist_ok=True) # Move copy_tree(srt_sourc, srt_desct) ## [&#39;_folder/fc/faa/file_a.txt&#39;, &#39;_folder/fc/faa/file_b.txt&#39;] Move contents to multiple destinations: from distutils.dir_util import copy_tree # Check/Create new Directory pathlib.Path(&#39;_folder/fd/faa/fa_images&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fb_images&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fc_images&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fz_img&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fz_other&#39;).mkdir(parents=True, exist_ok=True) # Move copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fa_images&#39;) ## [&#39;_folder/fd/faa/fa_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fa_images\\\\file_b.txt&#39;] copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fb_images&#39;) ## [&#39;_folder/fd/faa/fb_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fb_images\\\\file_b.txt&#39;] copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fc_images&#39;) ## [&#39;_folder/fd/faa/fc_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fc_images\\\\file_b.txt&#39;] copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fz_img&#39;) ## [&#39;_folder/fd/faa/fz_img\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fz_img\\\\file_b.txt&#39;] copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fz_other&#39;) # Empty Folder ## [&#39;_folder/fd/faa/fz_other\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fz_other\\\\file_b.txt&#39;] pathlib.Path(&#39;_folder/fd/faa/fd_images&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fe_images&#39;).mkdir(parents=True, exist_ok=True) 2.1.2.4 Search for Files in Folder Find the total number of files in a folder. import pathlib # the number of files in folder found with search critiera st_fle_search = &#39;*.txt&#39; ls_spn = [Path(spn).stem for spn in Path(&#39;_folder/fd/faa/fa_images&#39;).rglob(st_fle_search)] print(ls_spn) # count files in a non-empty folder ## [&#39;file_a&#39;, &#39;file_b&#39;] srn = &#39;_folder/fd/faa/fa_images&#39; [spn for spn in Path(srn).rglob(st_fle_search)] ## [WindowsPath(&#39;_folder/fd/faa/fa_images/file_a.txt&#39;), WindowsPath(&#39;_folder/fd/faa/fa_images/file_b.txt&#39;)] bl_folder_is_empty = len([spn for spn in Path(srn).rglob(st_fle_search)])&gt;0 print(bl_folder_is_empty) # count files in an empty folder ## True srn = &#39;_folder/fd/faa/fd_images&#39; [spn for spn in Path(srn).rglob(st_fle_search)] ## [] bl_folder_is_empty = len([spn for spn in Path(srn).rglob(st_fle_search)])&gt;0 print(bl_folder_is_empty) ## False 2.1.2.5 Search for Folder Names python search for folders containing strings Search for folders with certain search word in folder name, and only keep if folder actually has files. import os # get all folder names in folder ls_spt = os.listdir(&#39;_folder/fd/faa/&#39;) print(ls_spt) # Select only subfolder names containing _images ## [&#39;fa_images&#39;, &#39;fb_images&#39;, &#39;fc_images&#39;, &#39;fd_images&#39;, &#39;fe_images&#39;, &#39;fz_img&#39;, &#39;fz_other&#39;, &#39;_img&#39;] srt = &#39;_folder/fd/faa/&#39; st_search = &#39;_images&#39; ls_srt_found = [srt + spt for spt in os.listdir(srt) if st_search in spt] print(ls_srt_found) ## [&#39;_folder/fd/faa/fa_images&#39;, &#39;_folder/fd/faa/fb_images&#39;, &#39;_folder/fd/faa/fc_images&#39;, &#39;_folder/fd/faa/fd_images&#39;, &#39;_folder/fd/faa/fe_images&#39;] 2.1.2.6 Find Non-empty Folders by Name Search: Get subfolders in folder with string in name Only collect if there are files in the subfolder import pathlib # Select only subfolder names containing _images srt = &#39;_folder/fd/faa/&#39; # the folder names must contain _images st_srt_srh = &#39;_images&#39; # there must be files in the folder with this string st_fle_srh = &#39;*.txt&#39; # All folders that have String ls_srt_found = [srt + spt for spt in os.listdir(srt) if st_srt_srh in spt] print(ls_srt_found) # All folders that have String and that are nonempty ## [&#39;_folder/fd/faa/fa_images&#39;, &#39;_folder/fd/faa/fb_images&#39;, &#39;_folder/fd/faa/fc_images&#39;, &#39;_folder/fd/faa/fd_images&#39;, &#39;_folder/fd/faa/fe_images&#39;] ls_srt_found = [srt + spt for spt in os.listdir(srt) if ((st_srt_srh in spt) and (len([spn for spn in Path(srt + spt).rglob(st_fle_srh)])&gt;0)) ] print(ls_srt_found) ## [&#39;_folder/fd/faa/fa_images&#39;, &#39;_folder/fd/faa/fb_images&#39;, &#39;_folder/fd/faa/fc_images&#39;] 2.1.2.7 Found Folders to new Folder Search for subfolders by folder name string in a folder Select nonempty subfolders Move nonsempty subfolders to one new folder Move this single combination folder The results here are implemented as function in the pyfan package: fp_agg_move_subfiles. import pathlib import os import shutil from distutils.dir_util import copy_tree # 1 Define Parameters # Select only subfolder names containing _images srt = &#39;_folder/fd/faa/&#39; # the folder names must contain _images st_srt_srh = &#39;_images&#39; # there must be files in the folder with this string st_fle_srh = &#39;*.txt&#39; # new aggregating folder name srt_agg = &#39;_img&#39; # folders to move aggregation files towards ls_srt_dest = [&#39;_folder/fd/faa/&#39;, &#39;_folder/&#39;] # delete source bl_delete_source = False # 2 Gather Folders ls_ls_srt_found = [[srt + spt, spt] for spt in os.listdir(srt) if ((st_srt_srh in spt) and (len([spn for spn in Path(srt + spt).rglob(st_fle_srh)])&gt;0)) ] print(ls_ls_srt_found) # 3 Loop over destination folders, loop over source folders ## [[&#39;_folder/fd/faa/fa_images&#39;, &#39;fa_images&#39;], [&#39;_folder/fd/faa/fb_images&#39;, &#39;fb_images&#39;], [&#39;_folder/fd/faa/fc_images&#39;, &#39;fc_images&#39;]] for srt in ls_srt_dest: # Move each folder over for ls_srt_found in ls_ls_srt_found: # Paths srt_source = ls_srt_found[0] srt_dest = os.path.join(srt, srt_agg, ls_srt_found[1]) # dest folders pathlib.Path(srt_dest).mkdir(parents=True, exist_ok=True) # move copy_tree(ls_srt_found[0], srt_dest) # 4. Delete Sources ## [&#39;_folder/fd/faa/_img\\\\fa_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/_img\\\\fa_images\\\\file_b.txt&#39;] ## [&#39;_folder/fd/faa/_img\\\\fb_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/_img\\\\fb_images\\\\file_b.txt&#39;] ## [&#39;_folder/fd/faa/_img\\\\fc_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/_img\\\\fc_images\\\\file_b.txt&#39;] ## [&#39;_folder/_img\\\\fa_images\\\\file_a.txt&#39;, &#39;_folder/_img\\\\fa_images\\\\file_b.txt&#39;] ## [&#39;_folder/_img\\\\fb_images\\\\file_a.txt&#39;, &#39;_folder/_img\\\\fb_images\\\\file_b.txt&#39;] ## [&#39;_folder/_img\\\\fc_images\\\\file_a.txt&#39;, &#39;_folder/_img\\\\fc_images\\\\file_b.txt&#39;] if bl_delete_source: for ls_srt_found in ls_ls_srt_found: shutil.rmtree(ls_srt_found[0]) 2.1.3 Parse Yaml Go to the RMD, PDF, or HTML version of this file. Go back to fan’s Python Code Examples Repository (bookdown site). Use the PyYAML to parse yaml. 2.1.3.1 Write and Create a Simple YAML file First, Yaml as a string variable: # Create the Tex Text # Note that trible quotes begin first and end last lines stf_tex_contents = &quot;&quot;&quot;\\ - file: matrix_matlab title: &quot;One Variable Graphs and Tables&quot; description: | Frequency table, bar chart and histogram. R function and lapply to generate graphs/tables for different variables. core: - package: r code: | c(&#39;word1&#39;,&#39;word2&#39;) function() for (ctr in c(1,2)) {} - package: dplyr code: | group_by() date: 2020-05-02 output: pdf_document: pandoc_args: &#39;../_output_kniti_pdf.yaml&#39; includes: in_header: &#39;../preamble.tex&#39; urlcolor: blue - file: matrix_algebra_rules title: &quot;Opening a Dataset&quot; titleshort: &quot;Opening a Dataset&quot; description: | Opening a Dataset. core: - package: r code: | setwd() - package: readr code: | write_csv() date: 2020-05-02 date_start: 2018-12-01 - file: matrix_two title: &quot;Third file&quot; titleshort: &quot;Third file&quot; description: | Third file description.&quot;&quot;&quot; # Print print(stf_tex_contents) ## - file: matrix_matlab ## title: &quot;One Variable Graphs and Tables&quot; ## description: | ## Frequency table, bar chart and histogram. ## R function and lapply to generate graphs/tables for different variables. ## core: ## - package: r ## code: | ## c(&#39;word1&#39;,&#39;word2&#39;) ## function() ## for (ctr in c(1,2)) {} ## - package: dplyr ## code: | ## group_by() ## date: 2020-05-02 ## output: ## pdf_document: ## pandoc_args: &#39;../_output_kniti_pdf.yaml&#39; ## includes: ## in_header: &#39;../preamble.tex&#39; ## urlcolor: blue ## - file: matrix_algebra_rules ## title: &quot;Opening a Dataset&quot; ## titleshort: &quot;Opening a Dataset&quot; ## description: | ## Opening a Dataset. ## core: ## - package: r ## code: | ## setwd() ## - package: readr ## code: | ## write_csv() ## date: 2020-05-02 ## date_start: 2018-12-01 ## - file: matrix_two ## title: &quot;Third file&quot; ## titleshort: &quot;Third file&quot; ## description: | ## Third file description. Second, write the contents of the file to a new tex file stored inside the *_file* subfolder of the directory: # Relative file name srt_file_tex = &quot;_file/&quot; sna_file_tex = &quot;test_yml_fan&quot; srn_file_tex = srt_file_tex + sna_file_tex + &quot;.yml&quot; # Open new file fl_tex_contents = open(srn_file_tex, &#39;w&#39;) # Write to File fl_tex_contents.write(stf_tex_contents) # print ## 908 fl_tex_contents.close() 2.1.3.2 Select Subset of Values by Key Load Yaml file created prior, the output is a list of dictionaries: import yaml import pprint # Open yaml file fl_yaml = open(srn_file_tex) # load yaml ls_dict_yml = yaml.load(fl_yaml, Loader=yaml.BaseLoader) # type type(ls_dict_yml) ## &lt;class &#39;list&#39;&gt; type(ls_dict_yml[0]) # display ## &lt;class &#39;dict&#39;&gt; pprint.pprint(ls_dict_yml, width=1) ## [{&#39;core&#39;: [{&#39;code&#39;: &quot;c(&#39;word1&#39;,&#39;word2&#39;)\\n&quot; ## &#39;function()\\n&#39; ## &#39;for &#39; ## &#39;(ctr &#39; ## &#39;in &#39; ## &#39;c(1,2)) &#39; ## &#39;{}\\n&#39;, ## &#39;package&#39;: &#39;r&#39;}, ## {&#39;code&#39;: &#39;group_by()\\n&#39;, ## &#39;package&#39;: &#39;dplyr&#39;}], ## &#39;date&#39;: &#39;2020-05-02&#39;, ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram.\\n&#39; ## &#39;R &#39; ## &#39;function &#39; ## &#39;and &#39; ## &#39;lapply &#39; ## &#39;to &#39; ## &#39;generate &#39; ## &#39;graphs/tables &#39; ## &#39;for &#39; ## &#39;different &#39; ## &#39;variables.\\n&#39;, ## &#39;file&#39;: &#39;matrix_matlab&#39;, ## &#39;output&#39;: {&#39;pdf_document&#39;: {&#39;includes&#39;: {&#39;in_header&#39;: &#39;../preamble.tex&#39;}, ## &#39;pandoc_args&#39;: &#39;../_output_kniti_pdf.yaml&#39;}}, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;urlcolor&#39;: &#39;blue&#39;}, ## {&#39;core&#39;: [{&#39;code&#39;: &#39;setwd()\\n&#39;, ## &#39;package&#39;: &#39;r&#39;}, ## {&#39;code&#39;: &#39;write_csv()\\n&#39;, ## &#39;package&#39;: &#39;readr&#39;}], ## &#39;date&#39;: &#39;2020-05-02&#39;, ## &#39;date_start&#39;: &#39;2018-12-01&#39;, ## &#39;description&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset.\\n&#39;, ## &#39;file&#39;: &#39;matrix_algebra_rules&#39;, ## &#39;title&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset&#39;, ## &#39;titleshort&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset&#39;}, ## {&#39;description&#39;: &#39;Third &#39; ## &#39;file &#39; ## &#39;description.&#39;, ## &#39;file&#39;: &#39;matrix_two&#39;, ## &#39;title&#39;: &#39;Third &#39; ## &#39;file&#39;, ## &#39;titleshort&#39;: &#39;Third &#39; ## &#39;file&#39;}] Select yaml information by file name which is a key shared by components of the list: ls_str_file_ids = [&#39;matrix_two&#39;] ls_dict_selected = [dict_yml for dict_yml in ls_dict_yml if dict_yml[&#39;file&#39;] in ls_str_file_ids] pprint.pprint(ls_dc_selected, width=1) ## [{&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram&#39;, ## &#39;file&#39;: &#39;mat_matlab&#39;, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;val&#39;: 1}] 2.1.3.3 Dump List of Dictionary as YAML py yaml dump pipe Given a list of dictionaries, dump values to yaml. Note that dumped output does not use pipe for long sentences, but use single quote and space line, which works with the rmdparrse.py function without problem. ls_dict_selected = [dict_yml for dict_yml in ls_dict_yml if dict_yml[&#39;file&#39;] in [&#39;matrix_two&#39;,&#39;matrix_matlab&#39;]] print(yaml.dump(ls_dict_selected)) ## - core: ## - code: &#39;c(&#39;&#39;word1&#39;&#39;,&#39;&#39;word2&#39;&#39;) ## ## function() ## ## for (ctr in c(1,2)) {} ## ## &#39; ## package: r ## - code: &#39;group_by() ## ## &#39; ## package: dplyr ## date: &#39;2020-05-02&#39; ## description: &#39;Frequency table, bar chart and histogram. ## ## R function and lapply to generate graphs/tables for different variables. ## ## &#39; ## file: matrix_matlab ## output: ## pdf_document: ## includes: ## in_header: ../preamble.tex ## pandoc_args: ../_output_kniti_pdf.yaml ## title: One Variable Graphs and Tables ## urlcolor: blue ## - description: Third file description. ## file: matrix_two ## title: Third file ## titleshort: Third file "],
["index-and-code-links.html", "A Index and Code Links A.1 Array, Matrix, Dataframe links A.2 System and Support links", " A Index and Code Links A.1 Array, Matrix, Dataframe links A.1.1 Section 1.1 Array links Python String Manipulation Examples: rmd | r | pdf | html Various string manipulations py: zip() A.1.2 Section 1.2 Dictionary links Python Dictionary Exampls and Usages: rmd | r | pdf | html List comprehension with dictionary py: dc = {‘key’: “name”, ‘val’: 1} A.2 System and Support links A.2.1 Section 2.1 File In and Out links Python Reading and Writing to File Examples: rmd | r | pdf | html Reading from file and replace strings in file. Convert text file to latex using pandoc and clean. Search for files in several folders with file substring. Get path root, file name, file stem, etc from path. py: open() + write() + replace() + [c for b in [[1,2],[2,3]] for c in b] subprocess: read() pathlib: Path().rglob() + Path().stem os: remove() + listdir() + path.isfile() + path.splitdrive() + os.path.splitext() + os.path.split() Python Directory and Folder Operations: rmd | r | pdf | html Generate new folders and files. Generate subfolder recursively. Copying and moving files across folders. Aggregate subfolders into a folder and move. py: open(srt, ‘w’) + write() + close() os: os.listdir() + os.path.join(‘/’, ‘c:’, ‘fa’, ‘fb’) pathlib: Path(srt).mkdir(parents=True, exist_ok=True) + [Path(spn).stem for spn in Path(srt).rglob(st)] shutil: shutil.copyfile(‘/fa/fl.txt’, ‘/fb/fl.txt’) + shutil.copy2(‘/fa/fl.txt’, ‘/fb’) + shutil.rmtree(‘/fb’) distutils: dir_util.copy_tree(‘/fa’, ‘/fb’) Python Yaml File Parsing: rmd | r | pdf | html Parse and read yaml files. yaml: load(fl_yaml, Loader=yaml.BaseLoader) + dump() pprint: pprint.pprint(ls_dict_yml, width=1) "]
]
