[
["index.html", "A Collection of Python Examples Preface", " A Collection of Python Examples Fan Wang 2020-06-18 Preface The work-in-progress pyfan repository contains: Tutorials and examples for various research tasks: bookdown site and bookdown pdf. A package for basic data, graph and research tasks: readthedocs and pypi. Materials are gathered from various projects in which python code is used for research and paper-administrative tasks. Files are from Fan’s pyfan repository which has an associated package. The package functionalize various tasks tested out in the Rmd files. In addition, the pyecon repository and the associated package (readthedocs) contain functions and rmd files related explicitly to solving economic models. From Fan’s other repositories: For dynamic borrowing and savings problems, see Dynamic Asset Repository (Matlab); For code examples, see also Matlab Example Code, R Example Code, and Stata Example Code; For intro econ with Matlab, see Intro Mathematics for Economists, and for intro stat with R, see Intro Statistics for Undergraduates. See here for all of Fan’s public repositories. The site is built using Bookdown (Xie 2020). Please contact FanWangEcon for issues or problems. References "],
["array-matrix-dataframe.html", "Chapter 1 Array, Matrix, Dataframe 1.1 Array 1.2 Dictionary", " Chapter 1 Array, Matrix, Dataframe 1.1 Array 1.1.1 Strings Go back to fan’s Python Code Examples Repository (bookdown site). 1.1.1.1 Search if Names Include Strings Given a list of strings, loop but skip if string contains elements string list. # define string ls_st_ignore = [&#39;abc&#39;, &#39;efg&#39;, &#39;xyz&#39;] ls_st_loop = [&#39;ab cefg sdf&#39;, &#39;12345&#39;, &#39;xyz&#39;, &#39;abc xyz&#39;, &#39;good morning&#39;] # zip and loop and replace for st_loop in ls_st_loop: if sum([st_ignore in st_loop for st_ignore in ls_st_ignore]): print(&#39;skip:&#39;, st_loop) else: print(&#39;not skip:&#39;, st_loop) ## skip: ab cefg sdf ## not skip: 12345 ## skip: xyz ## skip: abc xyz ## not skip: good morning 1.1.1.2 Replace a Set of Strings in String Replace terms in string # define string st_full = &quot;&quot;&quot; abc is a great efg, probably xyz. Yes, xyz is great, like efg. eft good, EFG capitalized, efg good again. A B C or abc or ABC. Interesting xyz. &quot;&quot;&quot; # define new and old ls_st_old = [&#39;abc&#39;, &#39;efg&#39;, &#39;xyz&#39;] ls_st_new = [&#39;123&#39;, &#39;456&#39;, &#39;789&#39;] # zip and loop and replace for old, new in zip(ls_st_old, ls_st_new): st_full = st_full.replace(old, new) # print print(st_full) ## ## 123 is a great 456, probably 789. Yes, 789 is great, like 456. ## eft good, EFG capitalized, 456 good again. ## A B C or 123 or ABC. Interesting 789. 1.1.1.3 Wrap String with Fixed Width Given a long string, wrap it into multiple lines with fixed width. import textwrap # A long Path st_path = &quot;&quot;&quot; C:/Users/fan/Documents/Dropbox (UH-ECON)/Project Emily Minority Survey/EthLang/reg_lang_abi_cls_mino/tab3_fm/attain_m_vs_f/tab3_mand_talk_m2c_hfracle02.tex &quot;&quot;&quot; # Wrap text with tight width st_wrapped = textwrap.fill(st_path, width = 20) print(st_wrapped) ## C:/Users/fan/Docume ## nts/Dropbox (UH- ## ECON)/Project Emily ## Minority Survey/EthL ## ang/reg_lang_abi_cls ## _mino/tab3_fm/attain ## _m_vs_f/tab3_mand_ta ## lk_m2c_hfracle02.tex Combine Strings that are wrapped and not Wrapped # Paths st_path_a = &quot;C:/Users/fan/Documents/Dropbox (UH-ECON)/Project Emily Minority Survey/EthLang/reg_lang_abi_cls_mino/tab3_fm/attain_m_vs_f/tab3_mand_talk_m2c_hfracle02.tex&quot; st_path_b = &#39;C:/Users/fan/R4Econ/support/development/fs_packaging.html&#39; # Combine Strings and Wrap str_dc_records = &#39;First Path:&#39;.upper() + &#39;\\n&#39; + \\ textwrap.fill(st_path_a, width=25) + &#39;\\n\\n&#39; + \\ &#39;Second Path:&#39;.upper() + &#39;\\n&#39; + \\ textwrap.fill(st_path_b, width=25) # Print print(str_dc_records) ## FIRST PATH: ## C:/Users/fan/Documents/Dr ## opbox (UH-ECON)/Project ## Emily Minority Survey/Eth ## Lang/reg_lang_abi_cls_min ## o/tab3_fm/attain_m_vs_f/t ## ab3_mand_talk_m2c_hfracle ## 02.tex ## ## SECOND PATH: ## C:/Users/fan/R4Econ/suppo ## rt/development/fs_packagi ## ng.html 1.2 Dictionary 1.2.1 Dictionary Go back to fan’s Python Code Examples Repository (bookdown site). 1.2.1.1 Create a List of Dictionaries import datetime import pprint ls_dc_exa = [ {&quot;file&quot;: &quot;mat_matlab&quot;, &quot;title&quot;: &quot;One Variable Graphs and Tables&quot;, &quot;description&quot;: &quot;Frequency table, bar chart and histogram&quot;, &quot;val&quot;: 1, &quot;date&quot;: datetime.date(2020, 5, 2)}, {&quot;file&quot;: &quot;mat_two&quot;, &quot;title&quot;: &quot;Second file&quot;, &quot;description&quot;: &quot;Second file.&quot;, &quot;val&quot;: [1, 2, 3], &quot;date&quot;: datetime.date(2020, 5, 2)}, {&quot;file&quot;: &quot;mat_algebra_rules&quot;, &quot;title&quot;: &quot;Opening a Dataset&quot;, &quot;description&quot;: &quot;Opening a Dataset.&quot;, &quot;val&quot;: 1.1, &quot;date&quot;: datetime.date(2018, 12, 1)} ] pprint.pprint(ls_dc_exa, width=1) ## [{&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram&#39;, ## &#39;file&#39;: &#39;mat_matlab&#39;, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;val&#39;: 1}, ## {&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Second &#39; ## &#39;file.&#39;, ## &#39;file&#39;: &#39;mat_two&#39;, ## &#39;title&#39;: &#39;Second &#39; ## &#39;file&#39;, ## &#39;val&#39;: [1, ## 2, ## 3]}, ## {&#39;date&#39;: datetime.date(2018, 12, 1), ## &#39;description&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset.&#39;, ## &#39;file&#39;: &#39;mat_algebra_rules&#39;, ## &#39;title&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset&#39;, ## &#39;val&#39;: 1.1}] 1.2.1.2 Iteratively Add to A Dictionary Iteratively add additional Key and Value pairs to a dictionary. ls_snm_tex = [&quot;file1.tex&quot;, &quot;file2.tex&quot;, &quot;file3.tex&quot;] ls_snm_pdf = [&quot;file1.pdf&quot;, &quot;file2.pdf&quot;, &quot;file3.pdf&quot;] dc_tex_pdf = {} for tex, pdf in zip(ls_snm_tex, ls_snm_pdf): dc_tex_pdf[tex] = pdf pprint.pprint(dc_tex_pdf, width=1) ## {&#39;file1.tex&#39;: &#39;file1.pdf&#39;, ## &#39;file2.tex&#39;: &#39;file2.pdf&#39;, ## &#39;file3.tex&#39;: &#39;file3.pdf&#39;} 1.2.1.3 Select by Keys in Dictionary Given a list of dictionary, search if key name is in list: # string to search through ls_str_file_ids = [&#39;mat_matlab&#39;, &#39;mat_algebra_rules&#39;] # select subset ls_dc_selected = [dc_exa for dc_exa in ls_dc_exa if dc_exa[&#39;file&#39;] in ls_str_file_ids] # print pprint.pprint(ls_dc_selected, width=1) ## [{&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram&#39;, ## &#39;file&#39;: &#39;mat_matlab&#39;, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;val&#39;: 1}, ## {&#39;date&#39;: datetime.date(2018, 12, 1), ## &#39;description&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset.&#39;, ## &#39;file&#39;: &#39;mat_algebra_rules&#39;, ## &#39;title&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset&#39;, ## &#39;val&#39;: 1.1}] Search and Select by Multiple Keys in Dictionary. Using two keys below: # string to search through ls_str_file_ids = [&#39;mat_matlab&#39;, &#39;mat_algebra_rules&#39;] # select subset ls_dc_selected = [dc_exa for dc_exa in ls_dc_exa if ((dc_exa[&#39;file&#39;] in ls_str_file_ids) and (dc_exa[&#39;val&#39;]== 1))] # print pprint.pprint(ls_dc_selected, width=1) ## [{&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram&#39;, ## &#39;file&#39;: &#39;mat_matlab&#39;, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;val&#39;: 1}] "],
["tables-and-graphs.html", "Chapter 2 Tables and Graphs 2.1 Matplotlib Base Plots", " Chapter 2 Tables and Graphs 2.1 Matplotlib Base Plots 2.1.1 Line and Scatter Plots Go back to fan’s Python Code Examples Repository (bookdown site). 2.1.1.1 Plot Random Walk and White Noise Jointly Given x and y coordinates, plot out two lines. see matplotlib.pyplot.plot. Here we will plot out the extremes of AR(1), white noise (no persistence), and random walk (fully persistent shocks). # Import Packages import numpy as np import matplotlib.pyplot as plt # Generate X and Y np.random.seed(123) ar_fl_y1_rand = np.random.normal(0, 2, 100) ar_fl_y2_rand = np.cumsum(np.random.normal(0, 1, 100)) ar_it_x_grid = np.arange(1,len(ar_fl_y1_rand)+1) # Start Figure fig, ax = plt.subplots() # Graph ax.plot(ar_it_x_grid, ar_fl_y1_rand, color=&#39;blue&#39;, linestyle=&#39;dashed&#39;, label=&#39;sd=2, 0 persistence&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x000002A851EEC8E0&gt;] ax.plot(ar_it_x_grid, ar_fl_y2_rand, color=&#39;red&#39;, linestyle=&#39;solid&#39;, label=&#39;sd=1, random walk&#39;) # Labeling ## [&lt;matplotlib.lines.Line2D object at 0x000002A851F09610&gt;] ax.legend(loc=&#39;upper left&#39;) ## &lt;matplotlib.legend.Legend object at 0x000002A84F749A00&gt; plt.ylabel(&#39;Random Standard Normal Draws&#39;) ## Text(0, 0.5, &#39;Random Standard Normal Draws&#39;) plt.xlabel(&#39;Time Periods&#39;) ## Text(0.5, 0, &#39;Time Periods&#39;) plt.title(&#39;White Noise&#39;) ## Text(0.5, 1.0, &#39;White Noise&#39;) plt.grid() plt.show() 2.1.2 Text Plot Go back to fan’s Python Code Examples Repository (bookdown site). 2.1.2.1 Plot Text Plot Text as Image. Create text with different alignment and rotation. # Import Packages import matplotlib.pyplot as plt import textwrap import json # Dict of String to String dc_path = {&#39;C:\\\\Users\\\\fan\\\\Documents\\\\Dropbox (UH-ECON)\\\\repos\\\\Tex4Econ\\\\&#39; &#39;_other\\\\equation\\\\cases.tex&#39;: &#39;C:/Users/fan/Documents/cases.pdf&#39;, &#39;C:\\\\Users\\\\fan\\\\Documents\\\\Dropbox (UH-ECON)\\\\repos\\\\Tex4Econ\\\\&#39; &#39;_other\\\\symbols\\\\fs_symbols.tex&#39;: &#39;C:/Users/fan/Documents/fs_symbols.pdf&#39;} st_dc_path = textwrap.fill(json.dumps(dc_path), width = 70) # Start Plot fig, ax = plt.subplots() # Text Plot ax.text(0.5, 0.5, st_dc_path, horizontalalignment=&#39;center&#39;, verticalalignment=&#39;center&#39;, fontsize=14, color=&#39;black&#39;, transform=ax.transAxes) # Labeling ## Text(0.5, 0.5, &#39;{&quot;C:\\\\\\\\Users\\\\\\\\fan\\\\\\\\Documents\\\\\\\\Dropbox (UH-\\nECON)\\\\\\\\repos\\\\\\\\Tex4Econ\\\\\\\\_other\\\\\\\\equation\\\\\\\\cases.tex&quot;:\\n&quot;C:/Users/fan/Documents/cases.pdf&quot;,\\n&quot;C:\\\\\\\\Users\\\\\\\\fan\\\\\\\\Documents\\\\\\\\Dropbox (UH-\\nECON)\\\\\\\\repos\\\\\\\\Tex4Econ\\\\\\\\_other\\\\\\\\symbols\\\\\\\\fs_symbols.tex&quot;:\\n&quot;C:/Users/fan/Documents/fs_symbols.pdf&quot;}&#39;) ax.set_axis_off() plt.show() "],
["get-data.html", "Chapter 3 Get Data 3.1 Environmental Data", " Chapter 3 Get Data 3.1 Environmental Data 3.1.1 ECMWF ERA5 Data Go back to fan’s Python Code Examples Repository (bookdown site). 3.1.1.1 Basic Conda Setup Download Anaconda for Python 3. For more involved conda instructions see here Open up anaconda prompt with admin rights (right click choose as admin). # Inside anaconda prompt where python where anaconda # C:/ProgramData/Anaconda3/Scripts/anaconda.exe # C:/ProgramData/Anaconda3/python.exe Add to Path Install cdsapi and eccodes conda config --add channels conda-forge conda install -c conda-forge eccodes -y 3.1.1.2 Account Registration Register for an account Agree to Licence Go to your CDS user page copy the url and key: Get url and key this has UID, 4XXXX, and API KEY, 4XXXfXXX-XXXf-4XXX-9XXX-7XXXebXXfdXX together they should look like: 4XXXX:4XXXfXXX-XXXf-4XXX-9XXX-7XXXebXXfdXX Open up an editor (notepad++ for example), create an empty file, paste the url and your UID:APIKEY into the file as below. Save file as: C:/Users/fan/.cdsapirc. Under user root, as .cdsapirc file. Note .cdsapirc is the file name, you are saving that under the directory C:/Users/fan/. url: https://cds.climate.copernicus.eu/api/v2 key: 4XXXX:4XXXfXXX-XXXf-4XXX-9XXX-7XXXebXXfdXX 3.1.1.3 Run API Request via Jupyter Notebook open up Jupyter Notebook (this opens up a browser page) cd “C:/Users/fan/Downloads” jupyter notebook create a new python3 file somewhere you like name the file cdstest (saved as ipynb file) paste the code below inside the ipynb file you opened (modify spt_root): import cdsapi import urllib.request # download folder spt_root = &quot;C:/Users/fan/downloads/_data/&quot; spn_dl_test_grib = spt_root + &quot;test_china_temp.grib&quot; # request c = cdsapi.Client() res = c.retrieve(&quot;reanalysis-era5-pressure-levels&quot;, { &#39;product_type&#39;: &#39;reanalysis&#39;, &#39;variable&#39;: &#39;temperature&#39;, &#39;pressure_level&#39;: &#39;1000&#39;, &#39;year&#39;: &#39;2008&#39;, &#39;month&#39;: &#39;01&#39;, &#39;day&#39;: &#39;01&#39;, &#39;time&#39;: &#39;12:00&#39;, &#39;format&#39;: &#39;netcdf&#39;, &#39;area&#39; : [53.31, 73, 4.15, 135], &#39;grid&#39; : [1.0, 1.0], &quot;format&quot;: &quot;grib&quot; }, spn_dl_test_grib ) # show results print(&#39;print results&#39;) print(res) print(type(res)) click run 3.1.1.4 Run API request via Ipython In Anaconda Prompt: ipython Open a file in notepad++ or elsewhere, copy the code above over and edit the spt_root to reflect your directories Select the entire code in the notepad++ page, and copy all lines Now inside ipython, type percentage and paste: %paste This should run the file above and save the grib file in the folder you specified with the name you specified. 3.1.1.5 Convert CRIB data to CSV inside conda prompt cd into the folder where you downloaded the grib file grib_ls shows what is in the grib file grib_get_data translates grib to csv cd &quot;C:/Users/fan/downloads/_data/&quot; grib_ls test_china_temp.grib grib_get_data test_china_temp.grib &gt; test_china_temp_raw.csv 3.1.1.6 More Advanced Download Setup and Instructions 3.1.1.6.1 Conda Enviornment and Installation In conda, set up a conda environment for downloading ECMWF data using the ECMWF API. (Conda Set-up) # Set up conda deactivate conda list env conda env remove -n wk_ecmwf conda create -n wk_ecmwf -y conda activate wk_ecmwf # Add conda-forge to channel in env conda config --env --add channels conda-forge conda config --get channels conda config --get channels --env # Install conda install cdsapi -y conda install -c conda-forge eccodes -y This creates the conda env that we are using here for python. 3.1.1.6.2 Config File .cdsapirc Open up the cdsapirc, create new if does note exist. Below, open up the file and save the text. See Python Reading and Writing to File Examples. First, get the text for the config file: stf_cds_cdsapirc = &quot;&quot;&quot;\\ url: https://cds.climate.copernicus.eu/api/v2 key: 4XXXX:4XXXfXXX-XXXf-4XXX-9XXX-7XXXebXXfdXX\\ &quot;&quot;&quot; print(stf_cds_cdsapirc) Second save text to file: # Relative file name spt_file_cds = &quot;C:/Users/fan/&quot; snm_file_cds = &quot;.cdsapirc&quot; spn_file_cds = spt_file_cds + snm_file_cds # Open new file fl_cdsapirc_contents = open(spn_file_cds, &#39;w&#39;) # Write to File fl_cdsapirc_contents.write(stf_cds_cdsapirc) # Close fl_cdsapirc_contents.close() # Open the config file to check code &quot;C:/Users/fan/.cdsapirc&quot; 3.1.1.7 Generate API Requests Go to the sites below, choose download data, pick what is needed, and then select Show API request at the bottom of page: ERA5 pressure levels from 1979 to present ERA5 hourly pressure ERA5 monthly pressure ERA5 single levels from 1979 to present ERA5 hourly pressure ERA5 monthly pressure 3.1.1.7.1 API Request China Temp Test API function is here. Select based on China’s area, some testing data and download grib file. The data is from 2008, Jan 1st, at 12 noon? Open up Jupyter notebook: jupyter notebook # import module in conda env wk_ecmwf import cdsapi import urllib.request # download folder spt_root = &quot;C:/Users/fan/pyfan/vig/getdata/envir/&quot; spn_dl_test_grib = spt_root + &quot;_data/test/test_china_temp.grib&quot; # request c = cdsapi.Client() res = c.retrieve(&quot;reanalysis-era5-pressure-levels&quot;, { &#39;product_type&#39;: &#39;reanalysis&#39;, &#39;variable&#39;: &#39;temperature&#39;, &#39;pressure_level&#39;: &#39;1000&#39;, &#39;year&#39;: &#39;2008&#39;, &#39;month&#39;: &#39;01&#39;, &#39;day&#39;: &#39;01&#39;, &#39;time&#39;: &#39;12:00&#39;, &#39;format&#39;: &#39;netcdf&#39;, &#39;area&#39; : [53.31, 73, 4.15, 135], &#39;grid&#39; : [1.0, 1.0], &quot;format&quot;: &quot;grib&quot; }, spn_dl_test_grib ) # show results print(&#39;print results&#39;) print(res) print(type(res)) # download # response = urllib.request.urlopen(&#39;http://www.example.com/&#39;) # html = response.read() 2020-06-17 23:51:35,107 INFO Welcome to the CDS 2020-06-17 23:51:35,107 INFO Sending request to https://cds.climate.copernicus.eu/api/v2/resources/reanalysis-era5-pressure-levels 2020-06-17 23:51:36,441 INFO Request is queued 2020-06-17 23:51:39,183 INFO Request is running 2020-06-17 23:51:45,059 INFO Request is completed 2020-06-17 23:51:45,060 INFO Downloading &gt; http://136.156.133.25/cache-compute-0008/cache/data2/adaptor.mars.internal-1592455900.8655114-11162-11-68e1ea23-8985-4926-95e6-9f181cc7792&gt; 7.grib to C:/Users/fan/pyfan/vig/getdata/envir/_data/test/test_china_temp.grib (6.3K) 2020-06-17 23:51:45,441 INFO Download rate 16.6K/s print results Result(content_length=6480,content_type=application/x-grib,location=http://136.156.133.25/cache-compute-0008/cache/data2/adaptor.mars.inte&gt; rnal-1592455900.8655114-11162-11-68e1ea23-8985-4926-95e6-9f181cc77927.grib) &lt;class ‘cdsapi.api.Result’&gt; Convert grib to raw csv, open up command line: cd &quot;C:/Users/fan/pyfan/vig/getdata/envir/_data/test/&quot; grib_ls test_china_temp.grib grib_get_data test_china_temp.grib &gt; test_china_temp_raw.csv Format the CSV file (is not comma separated) spt_root = &quot;C:/Users/fan/pyfan/vig/getdata/envir/_data/test/&quot; spn_csv_raw = spt_root + &quot;test_china_temp_raw.csv&quot; spn_csv_edi = spt_root + &quot;test_china_temp.csv&quot; with open(spn_csv_raw, &#39;r&#39;) as f_in, open(spn_csv_edi, &#39;w&#39;) as f_out: f_out.write(next(f_in)) [f_out.write(&#39;,&#39;.join(line.split()) + &#39;\\n&#39;) for line in f_in] Show CSV results: # Path and Read spt_root = &quot;C:/Users/fan/pyfan/vig/getdata/envir/&quot; spn_dl_test_csv = paste0(spt_root, &quot;_data/test/test_china_temp.csv&quot;) china_weather_data &lt;- read.csv(spn_dl_test_csv) # Top 50 rows kable(head(china_weather_data, 50), caption=&quot;Chinese Long and Lat, Temperature Pressure, 2008 Jan 1st at 12 noon?&quot;) %&gt;% kable_styling_fc() Table 3.1: Chinese Long and Lat, Temperature Pressure, 2008 Jan 1st at 12 noon? Latitude Longitude Value 53.15 73 260.6515 53.15 74 259.9796 53.15 75 259.2227 53.15 76 258.5929 53.15 77 258.2765 53.15 78 258.0636 53.15 79 258.0069 53.15 80 257.7267 53.15 81 258.8370 53.15 82 260.9239 53.15 83 262.5440 53.15 84 263.9083 53.15 85 264.8976 53.15 86 264.6729 53.15 87 264.1827 53.15 88 265.0587 53.15 89 264.9425 53.15 90 266.2960 53.15 91 269.0958 53.15 92 270.3165 53.15 93 269.0030 53.15 94 268.4210 53.15 95 264.9591 53.15 96 261.9249 53.15 97 264.5304 53.15 98 265.3995 53.15 99 268.2374 53.15 100 269.9444 53.15 101 272.6202 53.15 102 270.6798 53.15 103 270.0919 53.15 104 269.6876 53.15 105 271.4718 53.15 106 271.2403 53.15 107 271.1163 53.15 108 269.3849 53.15 109 270.7247 53.15 110 269.6388 53.15 111 268.6622 53.15 112 267.6036 53.15 113 267.4796 53.15 114 266.6983 53.15 115 266.2911 53.15 116 266.5880 53.15 117 265.4513 53.15 118 264.4630 53.15 119 260.6183 53.15 120 259.3018 53.15 121 258.4161 53.15 122 258.8429 “ERA5 is a comprehensive reanalysis, from 1979 (soon to be backdated to 1950) to near real time, which assimilates as many observations as possible in the upper air and near surface. The ERA5 atmospheric model is coupled with a land surface model and a wave model.” Register for an account Agree to Licence 3.1.1.8 Learning 3.1.1.8.1 Terminologies Links: status of the CDS queue. Terminologies: single level parameters 3.1.1.8.2 Single Level Parameters ERA5 Variables? Table 1: surface and single level parameters: invariants Table 9: pressure level parameters: instantaneous Temperature ER5 Data Download Instructions. "],
["system-and-support.html", "Chapter 4 System and Support 4.1 Command Line 4.2 File In and Out 4.3 Install Python", " Chapter 4 System and Support 4.1 Command Line 4.1.1 Python Command Line Go back to fan’s Python Code Examples Repository (bookdown site). 4.1.1.1 Execute Command Line Python Functions run python from command line run python function with parameters from command line Here run python from command line inside python itself. Run: - from py.fan.util.rmd.mattexmd import fp_mlxtex2md - fp_mlxtex2md(spt_root=‘C:/Users/fan/Math4Econ/matrix_application/’, ls_srt_subfolders=None, st_rglob_tex=‘twogoods.tex’, verbose=True) Run: - python -c “from pyfan.util.rmd.mattexmd import fp_mlxtex2md; fp_mlxtex2md(spt_root=‘C:/Users/fan/Math4Econ/matrix_application/’, ls_srt_subfolders=None, st_rglob_tex=‘twogoods.tex’, verbose=True)” 4.1.2 Run Matlab Functions Go back to fan’s Python Code Examples Repository (bookdown site). 4.1.2.1 Generate A template Matlab Script Generate an example matlab script file with parameter x. # Example Matlab Function stf_m_contents = &quot;&quot;&quot;\\ a = x + 1 b = 10*x\\ &quot;&quot;&quot; # Print print(stf_m_contents) # Open new file ## a = x + 1 ## b = 10*x fl_m_contents = open(&quot;_m/fs_test.m&quot;, &#39;w&#39;) # Write to File fl_m_contents.write(stf_m_contents) # print ## 18 fl_m_contents.close() 4.1.2.2 Run the Matlab Function from Commandline run matlab function from command line Retrieving the output of subprocess.call https://www.mathworks.com/help/matlab/ref/matlabwindows.html First, check where matlab is installed: import subprocess cmd_popen = subprocess.Popen([&quot;where&quot;, &quot;matlab&quot;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) output, err = cmd_popen.communicate() print(output.decode(&#39;utf-8&#39;)) ## C:\\Program Files\\MATLAB\\R2019b\\bin\\matlab.exe Second, run the matlab file, first definet he parameter x: import os # print and set directory print(os.getcwd()) ## C:\\Users\\fan\\pyfan os.chdir(&#39;_m&#39;) print(os.getcwd()) # run matlab script saved prior # running command line: matlab -batch &quot;fs_test; exit&quot; ## C:\\Users\\fan\\pyfan\\_m cmd_popen = subprocess.Popen([&quot;matlab&quot;, &quot;-batch&quot;, &quot;\\&quot;x=1; fs_test; exit\\&quot;&quot;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) output, err = cmd_popen.communicate() print(output.decode(&#39;utf-8&#39;)) ## ## a = ## ## 2 ## ## ## b = ## ## 10 ## Third, run the function again, but with x=3: os.chdir(&#39;_m&#39;) print(os.getcwd()) ## C:\\Users\\fan\\pyfan\\_m print(subprocess.Popen([&quot;matlab&quot;, &quot;-batch&quot;, &quot;\\&quot;x=5; fs_test; exit\\&quot;&quot;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0].decode(&#39;utf-8&#39;)) ## ## a = ## ## 6 ## ## ## b = ## ## 50 ## 4.2 File In and Out 4.2.1 Read and Write and Convert Go back to fan’s Python Code Examples Repository (bookdown site). python create a text file python write file from paragraphs 4.2.1.1 Generate a tex file Will a bare-bone tex file with some texts inside, save inside the *_file* subfolder. First, create the text text string, note the the linebreaks utomatically generate linebreaks, note that slash need double slash: # Create the Tex Text # Note that trible quotes begin first and end last lines stf_tex_contents = &quot;&quot;&quot;\\\\documentclass[12pt,english]{article} \\\\usepackage[bottom]{footmisc} \\\\usepackage[urlcolor=blue]{hyperref} \\\\begin{document} \\\\title{A Latex Testing File} \\\\author{\\\\href{http://fanwangecon.github.io/}{Fan Wang} \\\\thanks{See information \\\\href{https://fanwangecon.github.io/Tex4Econ/}{Tex4Econ} for more.}} \\\\maketitle Ipsum information dolor sit amet, consectetur adipiscing elit. Integer Latex placerat nunc orci. \\\\paragraph{\\\\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132}{Data}} Village closure information is taken from a village head survey.\\\\footnote{Generally students went to schools.} \\\\end{document}&quot;&quot;&quot; # Print print(stf_tex_contents) ## \\documentclass[12pt,english]{article} ## \\usepackage[bottom]{footmisc} ## \\usepackage[urlcolor=blue]{hyperref} ## \\begin{document} ## \\title{A Latex Testing File} ## \\author{\\href{http://fanwangecon.github.io/}{Fan Wang} \\thanks{See information \\href{https://fanwangecon.github.io/Tex4Econ/}{Tex4Econ} for more.}} ## \\maketitle ## Ipsum information dolor sit amet, consectetur adipiscing elit. Integer Latex placerat nunc orci. ## \\paragraph{\\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132}{Data}} ## Village closure information is taken from a village head survey.\\footnote{Generally students went to schools.} ## \\end{document} Second, write the contents of the file to a new tex file stored inside the *_file* subfolder of the directory: # Relative file name srt_file_tex = &quot;_file/&quot; sna_file_tex = &quot;test_fan&quot; srn_file_tex = srt_file_tex + sna_file_tex + &quot;.tex&quot; # Open new file fl_tex_contents = open(srn_file_tex, &#39;w&#39;) # Write to File fl_tex_contents.write(stf_tex_contents) # print ## 617 fl_tex_contents.close() 4.2.1.2 Replace Strings in a tex file Replace a set of strings in the file just generated by a set of alternative strings. # Open file Get text fl_tex_contents = open(srn_file_tex) stf_tex_contents = fl_tex_contents.read() print(srn_file_tex) # define new and old ## _file/test_fan.tex ls_st_old = [&#39;information&#39;, &#39;Latex&#39;] ls_st_new = [&#39;INFOREPLACE&#39;, &#39;LATEX&#39;] # zip and loop and replace for old, new in zip(ls_st_old, ls_st_new): stf_tex_contents = stf_tex_contents.replace(old, new) print(stf_tex_contents) # write to file with replacements ## \\documentclass[12pt,english]{article} ## \\usepackage[bottom]{footmisc} ## \\usepackage[urlcolor=blue]{hyperref} ## \\begin{document} ## \\title{A LATEX Testing File} ## \\author{\\href{http://fanwangecon.github.io/}{Fan Wang} \\thanks{See INFOREPLACE \\href{https://fanwangecon.github.io/Tex4Econ/}{Tex4Econ} for more.}} ## \\maketitle ## Ipsum INFOREPLACE dolor sit amet, consectetur adipiscing elit. Integer LATEX placerat nunc orci. ## \\paragraph{\\href{https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132}{Data}} ## Village closure INFOREPLACE is taken from a village head survey.\\footnote{Generally students went to schools.} ## \\end{document} sna_file_edited_tex = &quot;test_fan_edited&quot; srn_file_edited_tex = srt_file_tex + sna_file_edited_tex + &quot;.tex&quot; fl_tex_ed_contents = open(srn_file_edited_tex, &#39;w&#39;) fl_tex_ed_contents.write(stf_tex_contents) ## 617 fl_tex_ed_contents.close() 4.2.1.3 Convert Tex File to Pandoc and Compile Latex Compile tex file to pdf and clean up the extraneous pdf outputs. See ff_pdf_gen_clean. import subprocess import os # Change to local directory so path in tex respected. os.chdir(&quot;C:/Users/fan/pyfan/vig/support/inout&quot;) # Convert tex to pdf subprocess.call([&#39;C:/texlive/2019/bin/win32/xelatex.exe&#39;, &#39;-output-directory&#39;, srt_file_tex, srn_file_edited_tex], shell=False) # Clean pdf extraneous output ## 0 ls_st_remove_suffix = [&#39;aux&#39;,&#39;log&#39;,&#39;out&#39;,&#39;bbl&#39;,&#39;blg&#39;] for st_suffix in ls_st_remove_suffix: srn_cur_file = srt_file_tex + sna_file_edited_tex + &quot;.&quot; + st_suffix if (os.path.isfile(srn_cur_file)): os.remove(srt_file_tex + sna_file_edited_tex + &quot;.&quot; + st_suffix) Use pandoc to convert tex file import subprocess # md file name srn_file_md = srt_file_tex + &quot;test_fan_edited.md&quot; # Convert tex to md subprocess.call([&#39;pandoc&#39;, &#39;-s&#39;, srn_file_tex, &#39;-o&#39;, srn_file_md]) # Open md file ## 0 fl_md_contents = open(srn_file_md) print(fl_md_contents.read()) ## --- ## author: ## - &#39;[Fan Wang](http://fanwangecon.github.io/) [^1]&#39; ## title: A Latex Testing File ## --- ## ## Ipsum information dolor sit amet, consectetur adipiscing elit. Integer ## Latex placerat nunc orci. ## ## #### [Data](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3140132) ## ## Village closure information is taken from a village head survey.[^2] ## ## [^1]: See information ## [Tex4Econ](https://fanwangecon.github.io/Tex4Econ/) for more. ## ## [^2]: Generally students went to schools. 4.2.1.4 Search for Files with Suffix in Several Folders python search all files in folders with suffix Search for files in several directories that have a particular suffix. Then decompose directory into sub-components. Search file inside several folders (not recursively in subfolders): from pathlib import Path # directories to search in ls_spt_srh = [&quot;C:/Users/fan/R4Econ/amto/&quot;, &quot;C:/Users/fan/R4Econ/function/&quot;] # get file names in folders (not recursively) ls_spn_found = [spn_file for spt_srh in ls_spt_srh for spn_file in Path(spt_srh).glob(&#39;*.Rmd&#39;)] for spn_found in ls_spn_found: print(spn_found) ## C:\\Users\\fan\\R4Econ\\amto\\main.Rmd ## C:\\Users\\fan\\R4Econ\\function\\main.Rmd Search file recursivesly in all subfolders of folders: from pathlib import Path # directories to search in ls_spt_srh = [&quot;C:/Users/fan/R4Econ/amto/array/&quot;, &quot;C:/Users/fan/R4Econ/amto/list&quot;] # get file names recursively in all subfolders ls_spn_found = [spn_file for spt_srh in ls_spt_srh for spn_file in Path(spt_srh).rglob(&#39;*.R&#39;)] for spn_found in ls_spn_found: drive, path_and_file = os.path.splitdrive(spn_found) path_no_suffix = os.path.splitext(spn_found)[0] path_no_file, file = os.path.split(spn_found) file_no_suffix = Path(spn_found).stem print(&#39;file:&#39;, file, &#39;\\ndrive:&#39;, drive, &#39;\\nfile no suffix:&#39;, file_no_suffix, &#39;\\nfull path:&#39;, spn_found, &#39;\\npt no fle:&#39;, path_no_file, &#39;\\npt no suf:&#39;, path_no_suffix, &#39;\\n&#39;) ## file: fs_ary_basics.R ## drive: C: ## file no suffix: fs_ary_basics ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_basics.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_basics ## ## file: fs_ary_generate.R ## drive: C: ## file no suffix: fs_ary_generate ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_generate.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_generate ## ## file: fs_ary_mesh.R ## drive: C: ## file no suffix: fs_ary_mesh ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_mesh.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_mesh ## ## file: fs_ary_string.R ## drive: C: ## file no suffix: fs_ary_string ## full path: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_string.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\array\\htmlpdfr\\fs_ary_string ## ## file: fs_listr.R ## drive: C: ## file no suffix: fs_listr ## full path: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_listr.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_listr ## ## file: fs_lst_basics.R ## drive: C: ## file no suffix: fs_lst_basics ## full path: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_lst_basics.R ## pt no fle: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr ## pt no suf: C:\\Users\\fan\\R4Econ\\amto\\list\\htmlpdfr\\fs_lst_basics 4.2.2 Folder Operations Go back to fan’s Python Code Examples Repository (bookdown site). 4.2.2.1 New Folder and Files create a folder and subfolder create two files in the new folder import pathlib # folder root srt_folder = &quot;_folder/&quot; # new folder srt_subfolder = srt_folder + &quot;fa/&quot; # new subfolder srt_subfolder = srt_subfolder + &quot;faa/&quot; # generate folders recursively pathlib.Path(srt_subfolder).mkdir(parents=True, exist_ok=True) # Open new file fl_tex_contents_aa = open(srt_subfolder + &quot;file_a.txt&quot;, &#39;w&#39;) # Write to File fl_tex_contents_aa.write(&#39;contents of file a&#39;) ## 18 fl_tex_contents_aa.close() # Open another new file and save fl_tex_contents_ab = open(srt_subfolder + &quot;file_b.txt&quot;, &#39;w&#39;) # Write to File fl_tex_contents_ab.write(&#39;contents of file b&#39;) ## 18 fl_tex_contents_ab.close() Generate more folders without files: # generate folders recursively pathlib.Path(&quot;_folder/fb/fba/&quot;).mkdir(parents=True, exist_ok=True) # generate folders recursively pathlib.Path(&quot;_folder/fc/&quot;).mkdir(parents=True, exist_ok=True) # generate folders recursively pathlib.Path(&quot;_folder/fd/&quot;).mkdir(parents=True, exist_ok=True) 4.2.2.2 Copy a File from One Folder to Another Move the two files from *_folder/fa/faa* to *_folder/faa* as well as to *_folder/fb/faa. Use shutil.copy2* so that more metadata is copied over. But copyfile is faster. How do I copy a file in Python? Moving one file: import shutil # Faster method shutil.copyfile(&#39;_folder/fa/faa/file_a.txt&#39;, &#39;_folder/fb/file_a.txt&#39;) # More metadat copied, and don&#39;t need to specify name ## &#39;_folder/fb/file_a.txt&#39; shutil.copy2(&#39;_folder/fa/faa/file_a.txt&#39;, &#39;_folder/fb/fba&#39;) ## &#39;_folder/fb/fba\\\\file_a.txt&#39; 4.2.2.3 Copy Folder to Multiple Destimations Move Entire Folder, How do I copy an entire directory of files into an existing directory using Python?: from distutils.dir_util import copy_tree # Move contents from fa/faa/ to fc/faa srt_curroot = &#39;_folder/fa/&#39; srt_folder = &#39;faa/&#39; srt_newroot = &#39;_folder/fc/&#39; # Full source and destination srt_sourc = srt_curroot + srt_folder srt_desct = srt_newroot + srt_folder # Check/Create new Directory pathlib.Path(srt_desct).mkdir(parents=True, exist_ok=True) # Move copy_tree(srt_sourc, srt_desct) ## [&#39;_folder/fc/faa/file_a.txt&#39;, &#39;_folder/fc/faa/file_b.txt&#39;] Move contents to multiple destinations: from distutils.dir_util import copy_tree # Check/Create new Directory pathlib.Path(&#39;_folder/fd/faa/fa_images&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fb_images&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fc_images&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fz_img&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fz_other&#39;).mkdir(parents=True, exist_ok=True) # Move copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fa_images&#39;) ## [&#39;_folder/fd/faa/fa_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fa_images\\\\file_b.txt&#39;] copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fb_images&#39;) ## [&#39;_folder/fd/faa/fb_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fb_images\\\\file_b.txt&#39;] copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fc_images&#39;) ## [&#39;_folder/fd/faa/fc_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fc_images\\\\file_b.txt&#39;] copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fz_img&#39;) ## [&#39;_folder/fd/faa/fz_img\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fz_img\\\\file_b.txt&#39;] copy_tree(&#39;_folder/fa/faa/&#39;, &#39;_folder/fd/faa/fz_other&#39;) # Empty Folder ## [&#39;_folder/fd/faa/fz_other\\\\file_a.txt&#39;, &#39;_folder/fd/faa/fz_other\\\\file_b.txt&#39;] pathlib.Path(&#39;_folder/fd/faa/fd_images&#39;).mkdir(parents=True, exist_ok=True) pathlib.Path(&#39;_folder/fd/faa/fe_images&#39;).mkdir(parents=True, exist_ok=True) 4.2.2.4 Search for Files in Folder Find the total number of files in a folder. import pathlib # the number of files in folder found with search critiera st_fle_search = &#39;*.txt&#39; ls_spn = [Path(spn).stem for spn in Path(&#39;_folder/fd/faa/fa_images&#39;).rglob(st_fle_search)] print(ls_spn) # count files in a non-empty folder ## [&#39;file_a&#39;, &#39;file_b&#39;] srn = &#39;_folder/fd/faa/fa_images&#39; [spn for spn in Path(srn).rglob(st_fle_search)] ## [WindowsPath(&#39;_folder/fd/faa/fa_images/file_a.txt&#39;), WindowsPath(&#39;_folder/fd/faa/fa_images/file_b.txt&#39;)] bl_folder_is_empty = len([spn for spn in Path(srn).rglob(st_fle_search)])&gt;0 print(bl_folder_is_empty) # count files in an empty folder ## True srn = &#39;_folder/fd/faa/fd_images&#39; [spn for spn in Path(srn).rglob(st_fle_search)] ## [] bl_folder_is_empty = len([spn for spn in Path(srn).rglob(st_fle_search)])&gt;0 print(bl_folder_is_empty) ## False 4.2.2.5 Search for Folder Names python search for folders containing strings Search for folders with certain search word in folder name, and only keep if folder actually has files. import os # get all folder names in folder ls_spt = os.listdir(&#39;_folder/fd/faa/&#39;) print(ls_spt) # Select only subfolder names containing _images ## [&#39;fa_images&#39;, &#39;fb_images&#39;, &#39;fc_images&#39;, &#39;fd_images&#39;, &#39;fe_images&#39;, &#39;fz_img&#39;, &#39;fz_other&#39;, &#39;_img&#39;] srt = &#39;_folder/fd/faa/&#39; st_search = &#39;_images&#39; ls_srt_found = [srt + spt for spt in os.listdir(srt) if st_search in spt] print(ls_srt_found) ## [&#39;_folder/fd/faa/fa_images&#39;, &#39;_folder/fd/faa/fb_images&#39;, &#39;_folder/fd/faa/fc_images&#39;, &#39;_folder/fd/faa/fd_images&#39;, &#39;_folder/fd/faa/fe_images&#39;] 4.2.2.6 Find Non-empty Folders by Name Search: Get subfolders in folder with string in name Only collect if there are files in the subfolder import pathlib # Select only subfolder names containing _images srt = &#39;_folder/fd/faa/&#39; # the folder names must contain _images st_srt_srh = &#39;_images&#39; # there must be files in the folder with this string st_fle_srh = &#39;*.txt&#39; # All folders that have String ls_srt_found = [srt + spt for spt in os.listdir(srt) if st_srt_srh in spt] print(ls_srt_found) # All folders that have String and that are nonempty ## [&#39;_folder/fd/faa/fa_images&#39;, &#39;_folder/fd/faa/fb_images&#39;, &#39;_folder/fd/faa/fc_images&#39;, &#39;_folder/fd/faa/fd_images&#39;, &#39;_folder/fd/faa/fe_images&#39;] ls_srt_found = [srt + spt for spt in os.listdir(srt) if ((st_srt_srh in spt) and (len([spn for spn in Path(srt + spt).rglob(st_fle_srh)])&gt;0)) ] print(ls_srt_found) ## [&#39;_folder/fd/faa/fa_images&#39;, &#39;_folder/fd/faa/fb_images&#39;, &#39;_folder/fd/faa/fc_images&#39;] 4.2.2.7 Found Folders to new Folder Search for subfolders by folder name string in a folder Select nonempty subfolders Move nonsempty subfolders to one new folder Move this single combination folder The results here are implemented as function in the pyfan package: fp_agg_move_subfiles. import pathlib import os import shutil from distutils.dir_util import copy_tree # 1 Define Parameters # Select only subfolder names containing _images srt = &#39;_folder/fd/faa/&#39; # the folder names must contain _images st_srt_srh = &#39;_images&#39; # there must be files in the folder with this string st_fle_srh = &#39;*.txt&#39; # new aggregating folder name srt_agg = &#39;_img&#39; # folders to move aggregation files towards ls_srt_dest = [&#39;_folder/fd/faa/&#39;, &#39;_folder/&#39;] # delete source bl_delete_source = False # 2 Gather Folders ls_ls_srt_found = [[srt + spt, spt] for spt in os.listdir(srt) if ((st_srt_srh in spt) and (len([spn for spn in Path(srt + spt).rglob(st_fle_srh)])&gt;0)) ] print(ls_ls_srt_found) # 3 Loop over destination folders, loop over source folders ## [[&#39;_folder/fd/faa/fa_images&#39;, &#39;fa_images&#39;], [&#39;_folder/fd/faa/fb_images&#39;, &#39;fb_images&#39;], [&#39;_folder/fd/faa/fc_images&#39;, &#39;fc_images&#39;]] for srt in ls_srt_dest: # Move each folder over for ls_srt_found in ls_ls_srt_found: # Paths srt_source = ls_srt_found[0] srt_dest = os.path.join(srt, srt_agg, ls_srt_found[1]) # dest folders pathlib.Path(srt_dest).mkdir(parents=True, exist_ok=True) # move copy_tree(ls_srt_found[0], srt_dest) # 4. Delete Sources ## [&#39;_folder/fd/faa/_img\\\\fa_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/_img\\\\fa_images\\\\file_b.txt&#39;] ## [&#39;_folder/fd/faa/_img\\\\fb_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/_img\\\\fb_images\\\\file_b.txt&#39;] ## [&#39;_folder/fd/faa/_img\\\\fc_images\\\\file_a.txt&#39;, &#39;_folder/fd/faa/_img\\\\fc_images\\\\file_b.txt&#39;] ## [&#39;_folder/_img\\\\fa_images\\\\file_a.txt&#39;, &#39;_folder/_img\\\\fa_images\\\\file_b.txt&#39;] ## [&#39;_folder/_img\\\\fb_images\\\\file_a.txt&#39;, &#39;_folder/_img\\\\fb_images\\\\file_b.txt&#39;] ## [&#39;_folder/_img\\\\fc_images\\\\file_a.txt&#39;, &#39;_folder/_img\\\\fc_images\\\\file_b.txt&#39;] if bl_delete_source: for ls_srt_found in ls_ls_srt_found: shutil.rmtree(ls_srt_found[0]) 4.2.3 Parse Yaml Go back to fan’s Python Code Examples Repository (bookdown site). Use the PyYAML to parse yaml. 4.2.3.1 Write and Create a Simple YAML file First, Yaml as a string variable: # Create the Tex Text # Note that trible quotes begin first and end last lines stf_tex_contents = &quot;&quot;&quot;\\ - file: matrix_matlab title: &quot;One Variable Graphs and Tables&quot; description: | Frequency table, bar chart and histogram. R function and lapply to generate graphs/tables for different variables. core: - package: r code: | c(&#39;word1&#39;,&#39;word2&#39;) function() for (ctr in c(1,2)) {} - package: dplyr code: | group_by() date: 2020-05-02 output: pdf_document: pandoc_args: &#39;../_output_kniti_pdf.yaml&#39; includes: in_header: &#39;../preamble.tex&#39; urlcolor: blue - file: matrix_algebra_rules title: &quot;Opening a Dataset&quot; titleshort: &quot;Opening a Dataset&quot; description: | Opening a Dataset. core: - package: r code: | setwd() - package: readr code: | write_csv() date: 2020-05-02 date_start: 2018-12-01 - file: matrix_two title: &quot;Third file&quot; titleshort: &quot;Third file&quot; description: | Third file description.&quot;&quot;&quot; # Print print(stf_tex_contents) ## - file: matrix_matlab ## title: &quot;One Variable Graphs and Tables&quot; ## description: | ## Frequency table, bar chart and histogram. ## R function and lapply to generate graphs/tables for different variables. ## core: ## - package: r ## code: | ## c(&#39;word1&#39;,&#39;word2&#39;) ## function() ## for (ctr in c(1,2)) {} ## - package: dplyr ## code: | ## group_by() ## date: 2020-05-02 ## output: ## pdf_document: ## pandoc_args: &#39;../_output_kniti_pdf.yaml&#39; ## includes: ## in_header: &#39;../preamble.tex&#39; ## urlcolor: blue ## - file: matrix_algebra_rules ## title: &quot;Opening a Dataset&quot; ## titleshort: &quot;Opening a Dataset&quot; ## description: | ## Opening a Dataset. ## core: ## - package: r ## code: | ## setwd() ## - package: readr ## code: | ## write_csv() ## date: 2020-05-02 ## date_start: 2018-12-01 ## - file: matrix_two ## title: &quot;Third file&quot; ## titleshort: &quot;Third file&quot; ## description: | ## Third file description. Second, write the contents of the file to a new tex file stored inside the *_file* subfolder of the directory: # Relative file name srt_file_tex = &quot;_file/&quot; sna_file_tex = &quot;test_yml_fan&quot; srn_file_tex = srt_file_tex + sna_file_tex + &quot;.yml&quot; # Open new file fl_tex_contents = open(srn_file_tex, &#39;w&#39;) # Write to File fl_tex_contents.write(stf_tex_contents) # print ## 908 fl_tex_contents.close() 4.2.3.2 Select Subset of Values by Key Load Yaml file created prior, the output is a list of dictionaries: import yaml import pprint # Open yaml file fl_yaml = open(srn_file_tex) # load yaml ls_dict_yml = yaml.load(fl_yaml, Loader=yaml.BaseLoader) # type type(ls_dict_yml) ## &lt;class &#39;list&#39;&gt; type(ls_dict_yml[0]) # display ## &lt;class &#39;dict&#39;&gt; pprint.pprint(ls_dict_yml, width=1) ## [{&#39;core&#39;: [{&#39;code&#39;: &quot;c(&#39;word1&#39;,&#39;word2&#39;)\\n&quot; ## &#39;function()\\n&#39; ## &#39;for &#39; ## &#39;(ctr &#39; ## &#39;in &#39; ## &#39;c(1,2)) &#39; ## &#39;{}\\n&#39;, ## &#39;package&#39;: &#39;r&#39;}, ## {&#39;code&#39;: &#39;group_by()\\n&#39;, ## &#39;package&#39;: &#39;dplyr&#39;}], ## &#39;date&#39;: &#39;2020-05-02&#39;, ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram.\\n&#39; ## &#39;R &#39; ## &#39;function &#39; ## &#39;and &#39; ## &#39;lapply &#39; ## &#39;to &#39; ## &#39;generate &#39; ## &#39;graphs/tables &#39; ## &#39;for &#39; ## &#39;different &#39; ## &#39;variables.\\n&#39;, ## &#39;file&#39;: &#39;matrix_matlab&#39;, ## &#39;output&#39;: {&#39;pdf_document&#39;: {&#39;includes&#39;: {&#39;in_header&#39;: &#39;../preamble.tex&#39;}, ## &#39;pandoc_args&#39;: &#39;../_output_kniti_pdf.yaml&#39;}}, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;urlcolor&#39;: &#39;blue&#39;}, ## {&#39;core&#39;: [{&#39;code&#39;: &#39;setwd()\\n&#39;, ## &#39;package&#39;: &#39;r&#39;}, ## {&#39;code&#39;: &#39;write_csv()\\n&#39;, ## &#39;package&#39;: &#39;readr&#39;}], ## &#39;date&#39;: &#39;2020-05-02&#39;, ## &#39;date_start&#39;: &#39;2018-12-01&#39;, ## &#39;description&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset.\\n&#39;, ## &#39;file&#39;: &#39;matrix_algebra_rules&#39;, ## &#39;title&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset&#39;, ## &#39;titleshort&#39;: &#39;Opening &#39; ## &#39;a &#39; ## &#39;Dataset&#39;}, ## {&#39;description&#39;: &#39;Third &#39; ## &#39;file &#39; ## &#39;description.&#39;, ## &#39;file&#39;: &#39;matrix_two&#39;, ## &#39;title&#39;: &#39;Third &#39; ## &#39;file&#39;, ## &#39;titleshort&#39;: &#39;Third &#39; ## &#39;file&#39;}] Select yaml information by file name which is a key shared by components of the list: ls_str_file_ids = [&#39;matrix_two&#39;] ls_dict_selected = [dict_yml for dict_yml in ls_dict_yml if dict_yml[&#39;file&#39;] in ls_str_file_ids] pprint.pprint(ls_dc_selected, width=1) ## [{&#39;date&#39;: datetime.date(2020, 5, 2), ## &#39;description&#39;: &#39;Frequency &#39; ## &#39;table, &#39; ## &#39;bar &#39; ## &#39;chart &#39; ## &#39;and &#39; ## &#39;histogram&#39;, ## &#39;file&#39;: &#39;mat_matlab&#39;, ## &#39;title&#39;: &#39;One &#39; ## &#39;Variable &#39; ## &#39;Graphs &#39; ## &#39;and &#39; ## &#39;Tables&#39;, ## &#39;val&#39;: 1}] 4.2.3.3 Dump List of Dictionary as YAML py yaml dump pipe Given a list of dictionaries, dump values to yaml. Note that dumped output does not use pipe for long sentences, but use single quote and space line, which works with the rmdparrse.py function without problem. ls_dict_selected = [dict_yml for dict_yml in ls_dict_yml if dict_yml[&#39;file&#39;] in [&#39;matrix_two&#39;,&#39;matrix_matlab&#39;]] print(yaml.dump(ls_dict_selected)) ## - core: ## - code: &#39;c(&#39;&#39;word1&#39;&#39;,&#39;&#39;word2&#39;&#39;) ## ## function() ## ## for (ctr in c(1,2)) {} ## ## &#39; ## package: r ## - code: &#39;group_by() ## ## &#39; ## package: dplyr ## date: &#39;2020-05-02&#39; ## description: &#39;Frequency table, bar chart and histogram. ## ## R function and lapply to generate graphs/tables for different variables. ## ## &#39; ## file: matrix_matlab ## output: ## pdf_document: ## includes: ## in_header: ../preamble.tex ## pandoc_args: ../_output_kniti_pdf.yaml ## title: One Variable Graphs and Tables ## urlcolor: blue ## - description: Third file description. ## file: matrix_two ## title: Third file ## titleshort: Third file 4.3 Install Python 4.3.1 Core Installations Go back to fan’s Python Code Examples Repository (bookdown site). Use the PyYAML to parse yaml. 4.3.1.1 Git Bash Download and install git 4.3.1.2 Conda Install Download Anaconda for Python 3. For more involved conda instructions see here Get where you installed conda: open up anaconda prompt with admin rights (press windows button, and search for anaconda prompt, right click on the resulting terminal icon, choose as admin, a terminal opens up). where python where anaconda # C:/ProgramData/Anaconda3/Scripts/anaconda.exe # C:/ProgramData/Anaconda3/python.exe Add to Path: open up windows Path and copy the paths found above inside. 4.3.1.2.1 Add To Path Details To Add Anaconda to Path, In Windows Search for: Environment Variables Edit Environment Variables Add new to Path (lower half): C:/ProgramData/Anaconda3/Scripts/ C:/ProgramData/Anaconda3/ Now open up regular windows command Prompt, Type in: conda –version Close and Open up Git Bash: conda –version Alternatively, in windows, directly search for Path, and add the python and anaconda exe paths to paths. "],
["index-and-code-links.html", "A Index and Code Links A.1 Array, Matrix, Dataframe links A.2 Tables and Graphs links A.3 Get Data links A.4 System and Support links", " A Index and Code Links A.1 Array, Matrix, Dataframe links A.1.1 Section 1.1 Array links Python String Manipulation Examples: rmd | r | pdf | html Search for substring, replace string, wrap string. py: zip() + upper() textwrap: fill(st, width = 20) A.1.2 Section 1.2 Dictionary links Python Dictionary Exampls and Usages: rmd | r | pdf | html List comprehension with dictionary py: dc = {‘key’: “name”, ‘val’: 1} A.2 Tables and Graphs links A.2.1 Section 2.1 Matplotlib Base Plots links Mabplotlib Scatter and Line Plots: rmd | r | pdf | html Plot several arrays of data, grid, figure title, and line and point patterns and colors. Plot out random walk and white noise first-order autoregressive processes. matplotlib: subplots() + ax.plot() + ax.legend() + ylabel() + xlabel() + title() + grid() + show() numpy: random.normal() + random.seed() + cumsum() + arange() Mabplotlib Text Plots: rmd | r | pdf | html Print text as figure. matplotlib: ax.text() textwrap: fill() json: dump() A.3 Get Data links A.3.1 Section 3.1 Environmental Data links CDS ECMWF Global Enviornmental Data Download: rmd | r | pdf | html Using Python API get get ECMWF ERA5 data. A.4 System and Support links A.4.1 Section 4.1 Command Line links Run Python from Command Line Examples: rmd | r | pdf | html Run python functions from command line. Run Matlab Command Line Operations: rmd | r | pdf | html Generate a matlab script and run the script with parameters. subprocess: cmd = Popen(ls_str, stdin=PIPE, stdout=PIPE, stderr=PIPE) + cmd.communicate() decode: decode(‘utf-8’) os: chdir() + getcdw() A.4.2 Section 4.2 File In and Out links Python Reading and Writing to File Examples: rmd | r | pdf | html Reading from file and replace strings in file. Convert text file to latex using pandoc and clean. Search for files in several folders with file substring. Get path root, file name, file stem, etc from path. py: open() + write() + replace() + [c for b in [[1,2],[2,3]] for c in b] subprocess: call() pathlib: Path().rglob() + Path().stem os: remove() + listdir() + path.isfile() + path.splitdrive() + os.path.splitext() + os.path.split() Python Directory and Folder Operations: rmd | r | pdf | html Generate new folders and files. Generate subfolder recursively. Copying and moving files across folders. Aggregate subfolders into a folder and move. py: open(srt, ‘w’) + write() + close() os: os.listdir() + os.path.join(‘/’, ‘c:’, ‘fa’, ‘fb’) pathlib: Path(srt).mkdir(parents=True, exist_ok=True) + [Path(spn).stem for spn in Path(srt).rglob(st)] shutil: shutil.copyfile(‘/fa/fl.txt’, ‘/fb/fl.txt’) + shutil.copy2(‘/fa/fl.txt’, ‘/fb’) + shutil.rmtree(‘/fb’) distutils: dir_util.copy_tree(‘/fa’, ‘/fb’) Python Yaml File Parsing: rmd | r | pdf | html Parse and read yaml files. yaml: load(fl_yaml, Loader=yaml.BaseLoader) + dump() pprint: pprint.pprint(ls_dict_yml, width=1) A.4.3 Section 4.3 Install Python links Basic Conda Setup Instructions: rmd | r | pdf | html Conda and git installations bash: where Xie, Yihui. 2020. Bookdown: Authoring Books and Technical Documents with R Markdown. https://CRAN.R-project.org/package=bookdown. "]
]
