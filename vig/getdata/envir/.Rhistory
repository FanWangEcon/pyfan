svr_out_val_unbank = 'val_unbank'
verbose = TRUE
ls_oth_params = ls_oth_params_t1
beta_val = ls_oth_params$beta_val
# 1. Merge states matrix tibble (a,z) with EV(ap=0,z), matchinb by z
df_unbank_zr <- df_states %>%
left_join(df_ev %>% filter(!!sym(svr_in_ap)==0) %>%
select(one_of(svr_in_z, svr_in_ev)), by=svr_in_z)
if (verbose) {
print(head(df_unbank_zr, 10))
}
# 2. Evaluate Current Utility
df_unbank_zr <- df_unbank_zr %>%
mutate(util_current_zero =
ffi_util_current(ar_ap=0,
fl_a=.[[svr_in_a]],
fl_z=.[[svr_in_z]],
fl_phi=0,
ls_oth_params=ls_oth_params))
if (verbose) {
print(head(df_unbank_zr, 10))
}
# 3. Utility Overall
df_unbank_zr <- df_unbank_zr %>%
mutate(!!sym(svr_out_val_unbank) :=
util_current_zero + beta_val*!!sym(svr_in_ev))
if (verbose) {
print(head(df_unbank_zr, 10))
}
df_states <- df_states_t1
fl_phi_fc <- ar_phi_fc_t1
fl_phi_sk <- ar_phi_sk_t1
df_ev_amin <- tb_ev_amin_t1
svr_in_a = 'a'
svr_in_z = 'z'
svr_in_ap = 'ap'
svr_in_ev = 'ev'
svr_lc_phi = 'phi'
svr_out_val_bankamin = 'val_bankamin'
verbose = TRUE
ls_oth_params = ls_oth_params_t1
# 1. fixed cost as vector
df_bank_amin <- df_states %>%
mutate(!!sym(svr_lc_phi) := case_when(
!!sym(svr_in_a) == 0 ~ fl_phi_fc + fl_phi_sk,
!!sym(svr_in_a) != 0 ~ fl_phi_fc,
))
if (verbose) {
print(head(df_bank_amin, 10))
}
# 2. Merge states matrix tibble (a,z) with EV(ap=amin,z), matching by z
df_bank_amin <- df_bank_amin %>%
left_join(df_ev_amin %>%
select(one_of(svr_in_z, svr_in_ev, svr_in_ap)),
by=svr_in_z)
if (verbose) {
print(head(df_bank_amin, 10))
}
# 3. Evaluate Current Utility
df_bank_amin <- df_bank_amin %>%
mutate(util_current_amin =
ffi_util_current(ar_ap=.[[svr_in_ap]],
fl_a=.[[svr_in_a]],
fl_z=.[[svr_in_z]],
fl_phi=.[[svr_lc_phi]],
ls_oth_params=ls_oth_params))
if (verbose) {
print(head(df_bank_amin, 10))
}
# 4. Utility Overall
fl_beta <- ls_oth_params$beta_val
df_bank_amin <- df_bank_amin %>%
mutate(!!sym(svr_out_val_bankamin) :=
util_current_amin + fl_beta*!!sym(svr_in_ev))
if (verbose) {
print(round(head(df_bank_amin, 10),3))
}
# ffi_val_unbank <- function(df_states, df_ev,
#                            ar_a, ar_z,
#                            svr_a_df_states = 'a', svr_z_df_states = 'z',
#                            svr_ap_df_ev = 'ap', svr_z_df_ev = 'z') {
#   #' Evaluate value for the unbanking option
#   #'
#   #' @description
#   #' no choices, aprime = 0, get one array of ev matrix where ap = zero
#   #'
#   #' @param df_states datafram of state values
#   #' @param ar_a unique element array of states
#   #' @param ar_z unique element array of shocks
#   #' @param svr_a_df_states string variable name of a var in df_states
#   #' @param svr_z_df_states string variable name of z var in df_states
#   #' @param ls_oth_params list with beta, sigma, r, w
#
#   ffi_util_current(ar_ap, fl_a, fl_z, fl_phi,
#                    ls_oth_params,
#                    fl_neg_c_util = -9999999,
#                     verbose = FALSE)
# }
df_states <- df_states_t1
fl_phi_fc <- ar_phi_fc_t1
fl_phi_sk <- ar_phi_sk_t1
df_ev <- tb_ev_t1
svr_in_a = 'a'
svr_in_z = 'z'
svr_in_ap = 'ap'
svr_in_ev = 'ev'
svr_lc_phi = 'phi'
svr_out_val_bankunc = 'val_bankunc'
verbose = TRUE
fl_a_min_val <- fl_amin_t1
# Arrange Ordering
ls_svr_arrange <- c(svr_in_a, svr_in_z)
# 1. sort by a and z for all
df_bank_unc <- df_states %>%
arrange(!!!syms(ls_svr_arrange))
# 2. fixed cost as vector
df_bank_unc <- df_states %>%
mutate(!!sym(svr_lc_phi) := case_when(
!!sym(svr_in_a) == 0 ~ fl_phi_fc + fl_phi_sk,
!!sym(svr_in_a) != 0 ~ fl_phi_fc,
))
if (verbose) {
print(head(df_bank_unc, 10))
}
# 3. Expand States Dataframe with choices and EV associated with z and ap
df_bank_unc_choices <- df_bank_unc %>%
left_join(df_ev %>%
select(one_of(svr_in_ap, svr_in_z, svr_in_ev)),
by = svr_in_z)
if (verbose) {
print(head(df_bank_unc_choices, 10))
}
# 4. Evaluate Current Utility
df_bank_unc_choices <- df_bank_unc_choices %>%
mutate(util_current_aunc =
ffi_util_current(ar_ap=.[[svr_in_ap]],
fl_a=.[[svr_in_a]],
fl_z=.[[svr_in_z]],
fl_phi=.[[svr_lc_phi]],
ls_oth_params=ls_oth_params))
if (verbose) {
print(head(df_bank_unc_choices, 10))
}
# 5. Utility Overall at all choice points
fl_beta <- ls_oth_params$beta_val
df_bank_unc_choices <- df_bank_unc_choices %>%
mutate(util_all_aunc :=
util_current_aunc + fl_beta*!!sym(svr_in_ev))
if (verbose) {
print(head(df_bank_unc_choices, 10))
}
# 6. Optimal Choices max val by group
# sort by a, z, and -val(ap,z)
# it_opti_seq == 1 is optimal choice for each state
df_bank_unc_opti <- df_bank_unc_choices %>%
arrange(!!!syms(ls_svr_arrange), -util_all_aunc) %>%
group_by(!!!syms(ls_svr_arrange)) %>%
mutate(it_opti_seq = row_number()) %>%
filter(it_opti_seq == 1) %>%
select(-it_opti_seq) %>%
rename(!!sym(svr_out_val_bankunc) := util_all_aunc) %>%
ungroup()
if (verbose) {
print(head(df_bank_unc_opti, 10))
}
df_states <- df_states_t1
df_unbank_zr <- df_unbank_zr
df_bank_amin <- df_bank_amin
df_bank_unc_opti <- df_bank_unc_opti
svr_in_ID = 'ID'
svr_in_a = 'a'
svr_in_z = 'z'
svr_in_ap = 'ap'
svr_in_ev = 'ev'
svr_in_phi = 'phi'
svr_in_val_unbank = 'val_unbank'
svr_in_val_bankamin = 'val_bankamin'
svr_in_val_bankunc = 'val_bankunc'
svr_out_save_cate = 'save_cate'
svr_out_ap_opti = 'ap_opti'
svr_out_val = 'val_disc'
fl_amin <- df_bank_amin %>% slice(1L) %>% pull(!!sym(svr_in_ap))
verbose = TRUE
# 1. Gather three matrixes, only needed variables
df_unbank_zr_sel <- df_unbank_zr %>%
select(one_of(svr_in_ID, svr_in_val_unbank))
df_bank_amin_sel <- df_bank_amin %>%
select(one_of(svr_in_ID, svr_in_val_bankamin))
df_bank_unc_opti_sel <- df_bank_unc_opti %>%
select(one_of(svr_in_ID, svr_in_ap, svr_in_val_bankunc))
if (verbose) {
print(head(df_unbank_zr_sel, 10))
print(head(df_bank_amin_sel, 10))
print(head(df_bank_unc_opti_sel, 10))
}
# 2. merge
df_val_ap_comp <- df_states %>% left_join(df_unbank_zr_sel, by=svr_in_ID) %>%
left_join(df_bank_amin_sel, by=svr_in_ID) %>%
left_join(df_bank_unc_opti_sel, by=svr_in_ID)
if (verbose) {
print(head(df_val_ap_comp, 10))
}
# 3. Solve for optimal choices and associated Values
# Note there are four possibilities below:
# a. bank savings constrained, unbank better
# b. bank savings unconstrained, unbank better
# c. bank savings constrained, bank (at amin) better
# d. bank savings unconstrained, bank better
df_val_ap_comp <- df_val_ap_comp %>%
mutate(!!sym(svr_out_save_cate) :=
case_when(
# a. bank savings constrained, unbank better
(!!sym(svr_in_ap) <= fl_amin) &
(!!sym(svr_in_val_unbank) >= !!sym(svr_in_val_bankamin))
~ 'unbank',
# b. bank savings unconstrained, unbank better
(!!sym(svr_in_ap) > fl_amin) &
(!!sym(svr_in_val_unbank) >= !!sym(svr_in_val_bankunc))
~ 'unbank',
# c. bank savings constrained, bank (at amin) better
(!!sym(svr_in_ap) <= fl_amin) &
(!!sym(svr_in_val_unbank) < !!sym(svr_in_val_bankamin))
~ 'amin',
# d. bank savings unconstrained, bank better
(!!sym(svr_in_ap) > fl_amin) &
(!!sym(svr_in_val_unbank) < !!sym(svr_in_val_bankunc))
~ 'bankunc'
)) %>%
mutate(!!sym(svr_out_ap_opti) :=
case_when(
!!sym(svr_out_save_cate) == 'unbank' ~ 0,
!!sym(svr_out_save_cate) == 'amin' ~ fl_amin,
!!sym(svr_out_save_cate) == 'bankunc' ~ !!sym(svr_in_ap)
)) %>%
mutate(!!sym(svr_out_val) :=
case_when(
!!sym(svr_out_save_cate) == 'unbank' ~ !!sym(svr_in_val_unbank),
!!sym(svr_out_save_cate) == 'amin' ~ !!sym(svr_in_val_bankamin),
!!sym(svr_out_save_cate) == 'bankunc' ~ !!sym(svr_in_val_bankunc)
))
if (verbose) {
print(head(df_val_ap_comp, 10))
}
df_solu_all_df <- df_val_ap_comp %>%
mutate(val_opti = !!sym(svr_out_val)) %>%
mutate(phi_fc = fl_phi_fc, phi_sk = fl_phi_sk) %>%
mutate(opti_bank_b =
case_when((!!sym(svr_in_val_bankunc) >= !!sym(svr_in_val_unbank)) ~ 1, TRUE ~ 0)) %>%
mutate(opti_a_prime_cate = save_cate) %>%
mutate(opti_bank_M4 =
case_when(!!sym(svr_in_val_bankunc) <= -1000 ~ 1,
!!sym(svr_out_ap_opti) == fl_amin ~ 2,
!!sym(svr_in_val_bankunc) <= !!sym(svr_in_val_unbank) ~ 3,
TRUE ~ 4))
bank_status <- c(unb_resurce_less_fc = "1",
unb_bk_opti_aprm_zr = "2",
unb_bk_opti_apr_pos = "3",
bnk_bk_bettr_unbank = "4")
df_solu_all_df <- df_solu_all_df %>%
mutate(opti_bank_M4 = as.factor(opti_bank_M4)) %>%
mutate(opti_bank_M4 = fct_recode(opti_bank_M4, !!!bank_status))
a_min_val <- fl_amin_t1
ls_shk_params <- ls_shk_params_t1
ls_oth_params <- ls_oth_params_t1
ffi_graph_save_model(a_min_val,
df_solu_all_df,
ls_shk_params,
ls_oth_params,
ls_bl_figures=list(bl_plt_unc_save_share=FALSE,
bl_plt_banked_status=TRUE,
bl_plt_unbank=TRUE,
bl_plt_bank_3types=TRUE,
bl_plt_value=TRUE))
rm(list=ls(all=TRUE))
try(source("../.Rprofile"))
source('../tools/davidzarruk_tauchen.R')
source('../m_twoperiod/fs_disc_cts_2t_fcaminsunk.R')
fl_amin_t1 = 0.25
ar_phi_fc_t1 = 0.25
ar_phi_sk_t1 = 0.25
ar_a_t1 = seq(0, 1.5, length.out = 50)
ls_oth_params_t1 = list(beta_val = 0.96, sigma_val = 1, R_val = 1.06, W_val = 1.2)
ls_shk_params_t1 = list(rho_val = 0.80, z_mean=0, z_sd=1, it_z_t3 = 50)
it_z_t1 = ls_shk_params_t1$it_z_t3
fl_z_sd_t1 = ls_shk_params_t1$z_sd
fl_rho_t1 = ls_shk_params_t1$rho_val
it_sd_span_t1 = 3
mt_z_trans_t1 <- Rtauchen(it_z_t1, fl_z_sd_t1, fl_rho_t1, it_sd_span_t1)
ar_z_t1 = Tgrid(it_z_t1, fl_z_sd_t1, fl_rho_t1, it_sd_span_t1)
ls_ffi_t2_solve_t1 <- suppressMessages(
ffi_t2_solve(fl_amin_t1, ar_phi_fc_t1, ar_phi_sk_t1,
ar_a_t1, ar_z_t1,
ls_shk_params_t1, ls_oth_params_t1))
df_v_a_z_t2_solu_t1 <- ls_ffi_t2_solve_t1$df_solu_t2
ls_ffi_t2_solve_amin_t1 <- suppressMessages(
ffi_t2_solve(fl_amin_t1, ar_phi_fc_t1, ar_phi_sk_t1,
fl_amin_t1, ar_z_t1,
ls_shk_params_t1, ls_oth_params_t1))
df_v_a_z_t2_solu_amin_t1 <- ls_ffi_t2_solve_amin_t1$df_solu_t2
df_states_t1 <- as_tibble(cbind(ar_a_t1)) %>% expand_grid(ar_z_t1) %>%
rowid_to_column(var='ID')
ar_st_col_names = c('ID', 'a', 'z')
df_states_t1 <- df_states_t1 %>% rename_all(~c(ar_st_col_names))
ffi_util_future_ev <- function(df_v_a_z, ar_a, ar_z, mt_z_trans,
svr_a_df_v = 'a', svr_z_df_v = 'z',
svr_val_df_v = 'val_opti',
svr_out_ap = 'ap',
svr_out_ev = 'ev',
verbose = FALSE) {
#' Find the expected value of given savings choice and current (last period) shock
#'
#' @description
#' Given the value function at V(a,z) points, given savings choice, and current
#' period shock, find EV(ap, z) = E_{zp}V(ap,zp). Note that this does not depend on a.
#'
#' @param df_v_a_z dataframe where v for each a and z is stored in separate rows
#' @param ar_a array of a used to solve v(a,z) and also is choice grid
#' @param ar_z array of z used to solve v(a,z) and also is shock grid
#' @param mt_z_trans transition matrix, p(zp|z), z are rows, zip columns
#' @param svr_out_ev string name of out variable
# Initiate
it_ctr_zap = 0
it_ctr = 0
# Store EV as matrix
mt_ev = matrix(NA_real_, nrow=length(ar_a), ncol=length(ar_z))
colnames(mt_ev) <- paste0(svr_z_df_v, round(ar_z*1000))
rownames(mt_ev) <- paste0(svr_out_ap, round(ar_a*1000))
# Store EV as table (for easier merging)
# loop over shock states
for (it_z in seq(1,length(ar_z))) {
# get z values
z = ar_z[it_z]
# loop over a grid of choices
for (it_ap in seq(1,length(ar_a))) {
# get aprime choice
ap = ar_a[it_ap]
# counter
it_ctr_zap = it_ctr_zap + 1
# EV
fl_ev = 0
# loop over future shocks
for (it_zp in seq(1,length(ar_z))) {
# get zp value
zp = ar_z[it_zp]
# get current p(z'|z)
p_zp_condi_z = mt_z_trans[it_z, it_zp]
# counter
it_ctr = it_ctr +  1
# Get v(aprime,zprime)
# val specific to a and z, repeats for each z
fl_val_ap_zp <- df_v_a_z %>%
filter(!!sym(svr_a_df_v) == ap & !!sym(svr_z_df_v) == zp) %>%
pull(!!sym(svr_val_df_v))
# Accumulate ev
fl_ev = fl_ev + fl_val_ap_zp*p_zp_condi_z
# Print info
# print(paste0('ctr:', it_ctr, ', z:',z,', ap:',ap,', zp:',zp))
if (verbose){
print(paste0('ctr:', it_ctr,
',',svr_z_df_v,':',z,
',',svr_out_ap,':',ap,
',',svr_z_df_v,'p:',zp,
',fl_val_ap_zp:', fl_val_ap_zp))
}
}
mt_ev[it_ap, it_z] = fl_ev
# print(paste0('it_ctr_zap:', it_ctr_zap, 'z:',z,', ap:',ap,', fl_ev:',fl_ev))
}
}
# Convert Matrix to Tibbble
# Name Vars
svr_zi <- paste0(svr_z_df_v, 'i')
svr_api <- paste0(svr_out_ap, 'i')
# Name Matrix
rownames(mt_ev) <- paste0(svr_api, seq(1:length(ar_a)))
colnames(mt_ev) <- paste0(svr_zi, seq(1:length(ar_z)))
# to tibble
tb_ev <- as_tibble(mt_ev) %>% rowid_to_column(var = svr_api)
# longer
tb_ev_long <- tb_ev %>%
pivot_longer(cols = starts_with(svr_zi),
names_to = c(svr_zi),
names_pattern = paste0(svr_zi,"(.*)"),
values_to = svr_out_ev) %>%
mutate(!!sym(svr_zi) := as.numeric(!!sym(svr_zi)))
# Merge with a and z values
tb_ev <- tb_ev_long %>%
left_join(as_tibble(ar_a) %>%
rowid_to_column(var = svr_api) %>%
rename(!!sym(svr_out_ap) := value)
, by = svr_api) %>%
left_join(as_tibble(ar_z) %>%
rowid_to_column(var = svr_zi) %>%
rename(!!sym(svr_z_df_v) := value),
by = svr_zi) %>%
select(!!sym(svr_out_ap), !!sym(svr_api),
!!sym(svr_z_df_v), !!sym(svr_zi),
!!sym(svr_out_ev))
# print
return(list(mt_ev=mt_ev, tb_ev=tb_ev))
}
# call function for regular grid
mt_ev_t1 = ffi_util_future_ev(df_v_a_z_t2_solu_t1, ar_a_t1, ar_z_t1, mt_z_trans_t1)$mt_ev
# ar_ev_t1 = as.vector(t(mt_ev_t1))
tb_ev_t1 = ffi_util_future_ev(df_v_a_z_t2_solu_t1, ar_a_t1, ar_z_t1, mt_z_trans_t1)$tb_ev
try(source("../../../.Rprofile"))
opts_chunk$set(engine.path = "C:/ProgramData/Anaconda3/envs/wk_ecmwf/python.exe")
library(reticulate)
# Get the Conda Env
print(conda_list())
# Use the ecmwf env
use_condaenv("wk_ecmwf")
library(reticulate)
spt_root = "C:/Users/fan/pyecon/vig/getdatagis/envir/"
spn_dl_test_grib = paste0(spt_root, "_data/test/test_basic.grib")
spn_dl_test_csv = paste0(spt_root, "_data/test/test_basic.csv")
# Get the Conda Env
print(conda_list())
# Use the ecmwf env
use_condaenv("wk_ecmwf")
# run
spg_code = paste0('grib_get_data ', spn_dl_test_grib, ' > ', spn_dl_test_csv)
system(spg_code, intern = TRUE)
# # show results
# print('print results:'+str(res))
# # Convert to csv
# # grib_get_data test_basic.grib > test_basic.csv
# grib_get_data C:/Users/fan/pyecon/vig/getdatagis/envir/_data/test/test_basic.grib > C:/Users/fan/pyecon/vig/getdatagis/envir/_data/test/test_basic.csv
#
# print(['grib_get_data', spn_dl_test_grib, '>', spn_dl_test_csv])
# subprocess.Popen(['grib_get_data', spn_dl_test_grib, '>', spn_dl_test_csv])
try(source("../../../.Rprofile"))
opts_chunk$set(engine.path = "C:/ProgramData/Anaconda3/envs/wk_ecmwf/python.exe")
spt_root = "C:/Users/fan/pyecon/vig/getdatagis/envir/"
spn_dl_test_csv = paste0(spt_root, "_data/test/test_china_temp.csv")
basetball_data <- read.csv(spn_dl_test_csv)
# Top 10 rows
kable(head(basetball_data, 10)) %>% kable_styling_fc()
# Bottom 10 rows
kable(tail(basetball_data, 10)) %>% kable_styling_fc()
spt_root = "C:/Users/fan/pyecon/vig/getdatagis/envir/"
spn_dl_test_csv = paste0(spt_root, "_data/test/test_china_temp.csv")
basetball_data <- read.csv(spn_dl_test_csv)
# Top 10 rows
kable(head(basetball_data, 10)) %>% kable_styling_fc()
# Bottom 10 rows
kable(tail(basetball_data, 10)) %>% kable_styling_fc()
# Path and Read
spt_root = "C:/Users/fan/pyecon/vig/getdatagis/envir/"
spn_dl_test_csv = paste0(spt_root, "_data/test/test_china_temp.csv")
basetball_data <- read.csv(spn_dl_test_csv)
# Top 50 rows
kable(head(basetball_data, 50),
caption="Chinese Long and Lat, Temperature Pressure, 2008 Jan 1st at 12 noon?") %>%
kable_styling_fc()
try(source("../../../.Rprofile"))
opts_chunk$set(engine.path = "C:/ProgramData/Anaconda3/envs/wk_ecmwf/python.exe")
# Path and Read
spt_root = "C:/Users/fan/pyecon/vig/getdatagis/envir/"
spn_dl_test_csv = paste0(spt_root, "_data/test/test_china_temp.csv")
basetball_data <- read.csv(spn_dl_test_csv)
# Top 50 rows
kable(head(basetball_data, 50),
caption="Chinese Long and Lat, Temperature Pressure, 2008 Jan 1st at 12 noon?") %>%
kable_styling_fc()
try(source("C:/Users/fan/R4Econ/.Rprofile"))
library(reticulate)
# run examples
spt_root <- 'C:/Users/fan/pyecon'
spt_log <- 'C:/Users/fan/pyecon/_log/rmdclean/'
sink(paste0(spt_log, 'rmd_clean_test.log'))
# run examples
spt_root <- 'C:/Users/fan/pyecon'
spt_log <- 'C:/Users/fan/pyecon/_log/rmdclean/'
sink(paste0(spt_log, 'rmd_clean_test.log'))
start_time <- Sys.time()
setwd(spt_root)
bl_test = TRUE
bl_gen_if_git_old = FALSE
ff_sup_clean_rmd(ar_spt_root = c('C:/Users/fan/pyecon'),
ar_spn_skip = c('pkgtest','index.Rmd', 'main.Rmd',
'_mod.Rmd', 'README', 'title.Rmd'),
st_folder_pdf = '/htmlpdfr/',
st_folder_html = '/htmlpdfr/',
st_folder_R = '/htmlpdfr/',
bl_gen_if_git_old = bl_gen_if_git_old,
bl_recursive = TRUE,
bl_verbose = FALSE,
bl_test = bl_test)
end_time <- Sys.time()
print(paste0('ff_sup_clean_rmd(), bl_test = TRUE, took:', end_time - start_time))
sink()
spt_root <- 'C:/Users/fan/pyecon'
spt_log <- 'C:/Users/fan/pyecon/_log/rmdclean/'
sink(paste0(spt_log, 'rmd_clean_actual.log'))
start_time <- Sys.time()
setwd(spt_root)
bl_test = FALSE
bl_gen_if_git_old = FALSE
ff_sup_clean_rmd(ar_spt_root = c('C:/Users/fan/pyecon'),
ar_spn_skip = c('pkgtest','index.Rmd', 'main.Rmd',
'_mod.Rmd', 'README', 'title.Rmd'),
st_folder_pdf = '/htmlpdfr/',
st_folder_html = '/htmlpdfr/',
st_folder_R = '/htmlpdfr/',
bl_gen_if_git_old = bl_gen_if_git_old,
bl_recursive = TRUE,
bl_verbose = TRUE,
bl_test = bl_test)
end_time <- Sys.time()
print(paste0('ff_sup_clean_rmd(), bl_test = FALSE, took:', end_time - start_time))
sink()
